import { useRef, useEffect, useState } from 'react'
import mapboxgl from 'mapbox-gl'
import 'mapbox-gl/dist/mapbox-gl.css'
import ReactDOM from 'react-dom/client'

// ÏïÑÏù¥ÏΩò
import Beacon from '@/assets/icons/Beacon.svg?react'
import CCTV from '@/assets/icons/CCTV.svg?react'
import Exit from '@/assets/icons/Exit.svg?react'
import Delete from '@/assets/icons/Delete.svg?react'

// MapBox access ÌÜ†ÌÅ∞
mapboxgl.accessToken = import.meta.env.VITE_MAPBOX_ACCESS_TOKEN

const MapBoxMap = ({
  mode,
  mapImageUrl,
  beaconList = [],
  edgeList = [],
  selectedIcon,
  onMapClick,
  onMarkerClick,
  onDeleteEdge,
  tempMarker,
}) => {
  // ÏßÄÎèÑ Ïª®ÌÖåÏù¥ÎÑà ÏöîÏÜåÎ•º Ï∞∏Ï°∞Ìï† ref
  const mapContainer = useRef(null)
  // MapboxÏùò Map Í∞ùÏ≤¥Î•º Ï†ÄÏû•Ìï† ref (Ïû¨Î†åÎçîÎßÅ Î∞©ÏßÄ)
  const mapRef = useRef(null)
  // Í∏∞Ï°¥ ÎßàÏª§Îì§ÏùÑ ÏßÄÏö∞Í∏∞ ÏúÑÌï¥ Îî∞Î°ú Ï†ÄÏû•
  const markerRefList = useRef([])

  // ===========================================
  // ÏßÄÎèÑ Ï¢åÌëúÍ≥Ñ ÏÑ§Ï†ï
  // ===========================================

  // Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïù¥Ï¶à (ÌîΩÏÖÄ)
  const imageWidth = 5000
  const imageHeight = 7800

  // Ïù¥ÎØ∏ÏßÄ ÎπÑÏú® (Í∞ÄÎ°ú / ÏÑ∏Î°ú)
  const imageAspectRatio = imageWidth / imageHeight // ÏïΩ 0.641

  // ÏßÄÎèÑ Ï¢åÌëúÍ≥ÑÎ°ú ÏÇ¨Ïö©Ìï† Í∞ÄÏÉÅÏùò ÏúÑÎèÑ/Í≤ΩÎèÑ Î≤îÏúÑ ÏÑ§Ï†ï
  const coordinateHeight = 60 // Ï†ÑÏ≤¥ ÏÑ∏Î°ú Î≤îÏúÑÎ•º 60ÎèÑÎ°ú Í∞ÄÏ†ï
  const coordinateWidth = coordinateHeight * imageAspectRatio // ÎπÑÏú® Ïú†ÏßÄÌï¥ÏÑú Í∞ÄÎ°ú Î≤îÏúÑ Í≥ÑÏÇ∞

  // Í∞ÄÏÉÅÏùò ÏßÄÎèÑ Ï¢åÌëú Í≤ΩÍ≥Ñ
  const top = coordinateHeight / 2 // +30
  const bottom = -coordinateHeight / 2 // -30
  const left = -coordinateWidth / 2 // -19.25
  const right = coordinateWidth / 2 // +19.25
  // ===========================================

  // Í∞ÑÏÑ† Î†àÏù¥Ïñ¥ ID Í≥†Ï†ï
  const lineLayerId = 'beacon-edges'

  // ÌîΩÏÖÄ Ï¢åÌëúÎ•º Í∞ÄÏÉÅÏùò ÏúÑÍ≤ΩÎèÑ Ï¢åÌëúÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
  const convertPixelToLngLat = (x, y, width, height) => {
    const lng = left + (x / width) * (right - left)
    const lat = top - (y / height) * (top - bottom) // YÏ∂ïÏùÄ Î∞òÎåÄÎ°ú ÎÇ¥Î†§Í∞ÄÎØÄÎ°ú ÎπºÏ§å
    return [lng, lat]
  }

  // ÏµúÏã† props Ïú†ÏßÄ
  const modeRef = useRef(mode)
  const onMarkerClickRef = useRef(onMarkerClick)

  useEffect(() => {
    modeRef.current = mode
  }, [mode])

  useEffect(() => {
    onMarkerClickRef.current = onMarkerClick
  }, [onMarkerClick])

  // =============
  // Í∞ÑÏÑ† ÏÇ≠Ï†ú
  // =============

  // Í∞ÑÏÑ† ÏÑ†ÌÉù ÏÉÅÌÉú
  const [selectedEdge, setSelectedEdge] = useState(null)
  const [xButtonTick, setXButtonTick] = useState(0) // Í∞ÑÏÑ† ÏÇ≠Ï†ú Î≤ÑÌäº ÏúÑÏπò Î¶¨Î†åÎçîÎßÅÏö© ÏÉÅÌÉú

  // X Î≤ÑÌäº ÏßÄÎèÑÏóê Îî∞ÎùºÎã§ÎãàÍ≤å
  useEffect(() => {
    const map = mapRef.current
    if (!map) return

    const handleMove = () => {
      if (selectedEdge) {
        setXButtonTick((prev) => prev + 1) // Î¶¨Î†åÎçî Ìä∏Î¶¨Í±∞
      }
    }

    map.on('move', handleMove)
    return () => map.off('move', handleMove)
  }, [selectedEdge])

  // 1. ÏµúÏ¥à ÏßÄÎèÑ Í∞ùÏ≤¥ ÏÉùÏÑ±
  useEffect(() => {
    // Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÍ±∞ÎÇò Ïù¥ÎØ∏ ÏÉùÏÑ±ÎêòÏóàÏúºÎ©¥ Î¨¥Ïãú
    if (!mapImageUrl || mapRef.current) return

    // Map Í∞ùÏ≤¥ ÏÉùÏÑ±
    mapRef.current = new mapboxgl.Map({
      container: mapContainer.current,
      style: {
        version: 8,
        sources: {}, // Ï¥àÍ∏∞ÏóêÎäî source, layer ÏóÜÏù¥ ÏãúÏûë
        layers: [],
      },
      center: convertPixelToLngLat(imageWidth / 2, imageHeight / 2, imageWidth, imageHeight), // Ï§ëÏïô ÏúÑÏπò
      zoom: 1.0,
      maxZoom: 8.0, // ÏµúÎåÄ Ï§å (Îçî Í∞ÄÍπåÏù¥ Î™ª Í∞ÄÍ≤å)
      pitch: 0, // ÏúÑÏóêÏÑú ÏàòÏßÅÏúºÎ°ú Î≥¥Í∏∞
      bearing: 0, // ÌöåÏ†Ñ ÏóÜÏùå
      interactive: true,
      dragRotate: true,
      renderWorldCopies: false, // ÏßÄÎèÑ Î∞òÎ≥µ Î∞©ÏßÄ
      maxBounds: [
        [left, bottom],
        [right, top],
      ],
    })
  }, [])

  // 2. mapImageUrlÏù¥ Î∞îÎÄî ÎïåÎßàÎã§ ÏßÄÎèÑÏóê Ïù¥ÎØ∏ÏßÄ Í∞±Ïã†
  useEffect(() => {
    const map = mapRef.current
    if (!map || !mapImageUrl) return

    // Ïù¥ÎØ∏ÏßÄ ÎÑ§ Í∑ÄÌâÅÏù¥Î•º ÏúÑÍ≤ΩÎèÑÎ°ú Î≥ÄÌôòÌï¥ imageBoundsÎ°ú Ï†ïÏùò
    const imageBounds = [
      convertPixelToLngLat(0, 0, imageWidth, imageHeight), // top-left
      convertPixelToLngLat(imageWidth, 0, imageWidth, imageHeight), // top-right
      convertPixelToLngLat(imageWidth, imageHeight, imageWidth, imageHeight), // bottom-right
      convertPixelToLngLat(0, imageHeight, imageWidth, imageHeight), // bottom-left
    ]

    // ÏßÄÎèÑÏóê ÏÜåÏä§ÏôÄ Î†àÏù¥Ïñ¥Î•º Ï∂îÍ∞ÄÌïòÎäî Ìï®Ïàò Ï†ïÏùò
    const updateImageLayer = () => {
      // Í∏∞Ï°¥ Î†àÏù¥Ïñ¥/ÏÜåÏä§Í∞Ä ÏûàÎã§Î©¥ Ï†úÍ±∞
      if (map.getLayer('custom-map-layer')) {
        map.removeLayer('custom-map-layer')
      }
      if (map.getSource('custom-map')) {
        map.removeSource('custom-map')
      }

      // ÏÉàÎ°úÏö¥ Ïù¥ÎØ∏ÏßÄ ÏÜåÏä§ Ï∂îÍ∞Ä
      map.addSource('custom-map', {
        type: 'image',
        url: mapImageUrl,
        coordinates: imageBounds, // ÏúÑÍ≤ΩÎèÑ Ï¢åÌëúÏóê ÎßûÏ∂∞ÏÑú Ïù¥ÎØ∏ÏßÄ Î∂ôÏù¥Í∏∞
      })

      // ÏÉàÎ°úÏö¥ Ïù¥ÎØ∏ÏßÄ Î†àÏù¥Ïñ¥ Ï∂îÍ∞Ä
      map.addLayer({
        id: 'custom-map-layer',
        type: 'raster',
        source: 'custom-map',
        paint: {
          'raster-opacity': 1,
        },
      })

      // ÏßÄÎèÑ Ï§ëÏã¨ Ïû¨ÏÑ§Ï†ï (Ïïà Ìï¥ÎèÑ ÎêòÏßÄÎßå UXÏÉÅ Ìé∏Î¶¨Ìï®)
      map.setCenter(convertPixelToLngLat(imageWidth / 2, imageHeight / 2, imageWidth, imageHeight))
      map.setZoom(1.0)
    }

    // Ïä§ÌÉÄÏùºÏù¥ Ïù¥ÎØ∏ Î°úÎìúÎêòÏóàÎã§Î©¥ Î∞îÎ°ú Ï∂îÍ∞Ä
    if (map.isStyleLoaded()) {
      updateImageLayer()
    } else {
      // Ïä§ÌÉÄÏùºÏù¥ ÏïÑÏßÅ Ïïà ÎÅùÎÇ¨ÏúºÎ©¥ Ïù¥Î≤§Ìä∏ ÎåÄÍ∏∞
      map.once('styledata', updateImageLayer)
    }
  }, [mapImageUrl])

  // ÏßÄÎèÑ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï†ÑÎã¨ Î°úÏßÅ
  useEffect(() => {
    const map = mapRef.current
    if (!map || !onMapClick) return

    const handleGlobalClick = (event) => {
      const { lng, lat } = event.lngLat

      // Í∞ÑÏÑ†Ïù¥ ÏÑ†ÌÉùÎêú ÏÉÅÌÉúÏù∏Îç∞ Ïù¥Î≤à ÌÅ¥Î¶≠Ïù¥ Í∞ÑÏÑ†Ïù¥ ÏïÑÎãàÎ©¥ Ìï¥Ï†ú
      const clickedEdgeLayer = event.features?.some((f) => f.layer?.id === lineLayerId)
      if (selectedEdge && !clickedEdgeLayer) {
        setSelectedEdge(null)
      }

      onMapClick({ coord_x: lng, coord_y: lat })
    }

    map.on('click', handleGlobalClick)
    return () => map.off('click', handleGlobalClick)
  }, [onMapClick, selectedEdge])

  // ÎßàÏª§ Î∞è Í∞ÑÏÑ† Í∑∏Î¶¨Í∏∞
  useEffect(() => {
    const map = mapRef.current
    if (!map) return

    const drawAll = () => {
      try {
        // Í∏∞Ï°¥ ÎßàÏª§ Ï†úÍ±∞
        markerRefList.current.forEach((m) => m.remove())
        markerRefList.current = []

        // ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÎïåÎ¨∏Ïóê ÌÅ¨Í∏∞ Ï°∞Ï†ï
        // const xScale = imageWidth / 600
        // const yScale = imageHeight / 400

        // beacon_code ‚Üí [lng, lat] Îß§ÌïëÏö© Í∞ùÏ≤¥
        const beaconMap = {}

        beaconList.forEach((beacon) => {
          const { coord_x, coord_y, is_exit, is_cctv, name, beacon_code } = beacon

          // const scaledX = (coord_x + 100) * xScale
          // const scaledY = coord_y * yScale
          // const [lng, lat] = convertPixelToLngLat(coord_x, coord_y, imageWidth, imageHeight)
          const [lng, lat] = [coord_x, coord_y]

          // ÏúÑÏπò Ï†ÄÏû•
          beaconMap[beacon_code] = [lng, lat]

          let IconComponent = Beacon
          if (is_exit) IconComponent = Exit
          else if (is_cctv) IconComponent = CCTV

          const container = document.createElement('div')
          ReactDOM.createRoot(container).render(<IconComponent className="text-primary h-8 w-8" />)

          // Ïù¥Î≤§Ìä∏ Ïó¨Í∏∞Îã§ ÎÑ£Ïñ¥!!
          container.addEventListener('click', () => {
            if (modeRef.current === 'route' || modeRef.current === 'map') {
              onMarkerClickRef.current?.(beacon)
            }
          })

          const marker = new mapboxgl.Marker({ element: container })
            .setLngLat([lng, lat])
            .addTo(map)

          markerRefList.current.push(marker)
        })

        // Í∏∞Ï°¥ ÏÑ† Î†àÏù¥Ïñ¥ Ï†úÍ±∞
        if (map.getLayer(lineLayerId)) map.removeLayer(lineLayerId)
        if (map.getSource(lineLayerId)) map.removeSource(lineLayerId)

        // edgeList ‚Üí GeoJSON Î≥ÄÌôò
        const lineFeatures = edgeList
          .map((edge) => {
            const a = beaconMap[edge.beacon_a_code]
            const b = beaconMap[edge.beacon_b_code]
            if (!a || !b) return null
            return {
              type: 'Feature',
              geometry: {
                type: 'LineString',
                coordinates: [a, b],
              },
              properties: {
                edge_id: edge.edge_id, // Í∞ÑÏÑ† ÏÇ≠Ï†úÎ•º ÏúÑÌï¥ Ï∂îÍ∞Ä
              },
            }
          })
          .filter(Boolean)

        // GeoJSON source ÏÉùÏÑ±
        map.addSource(lineLayerId, {
          type: 'geojson',
          data: {
            type: 'FeatureCollection',
            features: lineFeatures,
          },
        })

        // ÏÑ† Î†àÏù¥Ïñ¥ Ï∂îÍ∞Ä
        map.addLayer({
          id: lineLayerId,
          type: 'line',
          source: lineLayerId,
          paint: {
            'line-color': '#8aea52',
            'line-width': 6,
          },
        })

        console.log('‚úÖ Î†àÏù¥Ïñ¥ ÌôïÏù∏:', map.getLayer(lineLayerId))

        // Í∞ÑÏÑ† ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Îì±Î°ù (Î†àÏù¥Ïñ¥ ÌÅ¥Î¶≠Ïö©)
        if (map.getLayer(lineLayerId)) {
          map.on('click', lineLayerId, (e) => {
            console.log('üî• Í∞ÑÏÑ† ÌÅ¥Î¶≠Îê®:', e.features)
            const edge = e.features?.[0]
            if (modeRef.current !== 'route') return
            if (edge?.properties?.edge_id) {
              setSelectedEdge(edge)
            }
          })
        }
      } catch (error) {
        console.error('ÏßÄÎèÑ Í∑∏Î¶¨Í∏∞ Ïã§Ìå®:', error)
      }
    }
    if (map.isStyleLoaded()) {
      drawAll()
    } else {
      map.once('styledata', drawAll)
    }
  }, [beaconList, edgeList, mapImageUrl, mode])

  return (
    <div className="relative h-full w-full">
      {/* Ïã§Ï†ú mapÏùÑ Í∑∏Î¶¥ container */}
      <div ref={mapContainer} className="h-full w-full" />

      {/* tempMarkerÍ∞Ä ÏûàÏùÑ Í≤ΩÏö∞ ÎØ∏Î¶¨Î≥¥Í∏∞ ÎßàÏª§ ÏïÑÏù¥ÏΩò ÌëúÏãú */}
      {tempMarker &&
        mapRef.current &&
        (() => {
          const projected = mapRef.current.project([tempMarker.coord_x, tempMarker.coord_y])

          const iconMap = {
            cctv: CCTV,
            beacon: Beacon,
            exit: Exit,
          }

          const Icon = iconMap[tempMarker.iconId]

          return (
            <div
              className="pointer-events-none absolute z-10"
              style={{
                top: `${projected.y}px`,
                left: `${projected.x}px`,
                transform: 'translate(-50%, -100%)',
              }}
            >
              {Icon && <Icon className="text-primary h-6 w-6" />}
            </div>
          )
        })()}

      {/* X Î≤ÑÌäº: selectedEdgeÍ∞Ä ÏûàÏùÑ ÎïåÎßå */}
      {mode === 'route' &&
        selectedEdge &&
        (() => {
          const [a, b] = selectedEdge.geometry.coordinates
          const projectedA = mapRef.current.project(a)
          const projectedB = mapRef.current.project(b)

          return (
            <div
              key={xButtonTick} // Î¶¨Î†åÎçî Ïú†ÎèÑ
              className="absolute z-50"
              style={{
                left: `${(projectedA.x + projectedB.x) / 2}px`,
                top: `${(projectedA.y + projectedB.y) / 2}px`,
                transform: 'translate(-50%, -50%)',
              }}
            >
              <button
                onClick={() => {
                  const edgeId = selectedEdge.properties.edge_id
                  if (edgeId) onDeleteEdge?.(edgeId)
                  setSelectedEdge(null)
                }}
                className="rounded-sm bg-red-600 p-1 text-xs text-white shadow-md hover:bg-red-500"
              >
                <Delete className="h-6 w-6" />
              </button>
            </div>
          )
        })()}
    </div>
  )
}

export default MapBoxMap
