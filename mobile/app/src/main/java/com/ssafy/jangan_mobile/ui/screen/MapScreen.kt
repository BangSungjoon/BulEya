package com.ssafy.jangan_mobile.ui.screen

import android.graphics.BitmapFactory
import android.util.Log
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.layout.*
import androidx.compose.runtime.*
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.mapbox.geojson.Point
import com.mapbox.maps.CameraBoundsOptions
import com.mapbox.maps.CameraOptions
import com.mapbox.maps.CoordinateBounds
import com.mapbox.maps.MapView
import com.mapbox.maps.extension.style.image.image
import com.mapbox.maps.extension.style.layers.generated.backgroundLayer
import com.mapbox.maps.extension.style.layers.generated.rasterLayer
import com.mapbox.maps.extension.style.sources.generated.imageSource
import com.mapbox.maps.extension.style.style
import com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions
import com.mapbox.maps.plugin.annotation.annotations
import com.mapbox.maps.plugin.annotation.generated.PointAnnotation
import com.mapbox.maps.plugin.annotation.generated.PointAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.createPointAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.createPolylineAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions
import com.ssafy.jangan_mobile.R
import com.ssafy.jangan_mobile.service.dto.FireNotificationDto
import com.ssafy.jangan_mobile.store.FireNotificationStore
import com.ssafy.jangan_mobile.ui.component.ArrivalCard
import com.ssafy.jangan_mobile.ui.component.EvacuationButton
import com.ssafy.jangan_mobile.ui.component.FireDetailBottomSheet
import com.ssafy.jangan_mobile.ui.component.FloorSelector
import com.ssafy.jangan_mobile.ui.viewmodel.MapViewModel
import com.ssafy.jangan_mobile.viewmodel.EscapeRouteViewModel
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import com.ssafy.jangan_mobile.service.dto.BeaconNotificationDto
import com.ssafy.jangan_mobile.ui.component.FireNotificationCard
import com.ssafy.jangan_mobile.ui.component.FireStation

import androidx.compose.ui.res.painterResource
import com.mapbox.common.toValue
import com.mapbox.maps.plugin.animation.MapAnimationOptions.Companion.mapAnimationOptions
import com.mapbox.maps.plugin.animation.flyTo

@Composable
fun EscapeRouteMapScreen(
    navController: NavController,
    viewModel: EscapeRouteViewModel = viewModel(),
    mapViewModel: MapViewModel = hiltViewModel()
) {
    val context = LocalContext.current
    val mapView = remember { MapView(context) }

    val fireNotificationDto: FireNotificationDto? by FireNotificationStore.fireNotificationDto.observeAsState()
    val currentLocationCode by FireNotificationStore.currentLocationBeaconCode.observeAsState()
    val routePoints by viewModel.route.observeAsState(emptyList())
    val imageUrl by mapViewModel.mapImageUrl.collectAsState()
    val myLocation by viewModel.myLocation.observeAsState()
    val isTracking by viewModel.isTracking.observeAsState()

    val showRoute = remember { mutableStateOf(false) }
    val selectedFloor = remember { mutableStateOf("B1") }
    val pointAnnotationManager = remember { mutableStateOf<PointAnnotationManager?>(null) }
    val polylineManager = remember { mutableStateOf<PolylineAnnotationManager?>(null) }

    val imageWidth = 5000
    val imageHeight = 7800
    val aspectRatio = imageWidth.toDouble() / imageHeight.toDouble()
    val coordinateHeight = 60.0
    val coordinateWidth = coordinateHeight * aspectRatio
    val top = coordinateHeight / 2
    val bottom = -coordinateHeight / 2
    val left = -coordinateWidth / 2
    val right = coordinateWidth / 2

    fun convertPixelToLngLat(x: Int, y: Int): List<Double> {
        val lng = left + (x.toDouble() / imageWidth) * (right - left)
        val lat = top - (y.toDouble() / imageHeight) * (top - bottom)
        return listOf(lng, lat)
    }


    // ÏÉÅÌÉú Î≥ÄÏàò
    val hasArrived = remember { mutableStateOf(false) }
    val showArrivalCard = remember { mutableStateOf(false) }
    val isCardVisible = remember { mutableStateOf(true) } // ÎèÑÏ∞©Ïπ¥Îìú
    val isGuiding = remember { mutableStateOf(false) }
    val isFireNotificationCardVisible = remember { mutableStateOf(true) } // ÎßàÏª§ ÌÅ¥Î¶≠Ïö©
    val fireNotification = fireNotificationDto
    val isFireStationShown = remember { mutableStateOf(false) } // ÏµúÏ¥à ÏïåÎ¶ºÏö©
    val cctvImageUrl = remember { mutableStateOf<String?>(null) }
    val selectedFireBeaconDto = remember { mutableStateOf<BeaconNotificationDto?>(null) }

    // ÎßàÏª§Îì§
    val myLocationAnnotation = remember { mutableStateOf<PointAnnotation?>(null) }
    val goalMarker = remember { mutableStateOf<PointAnnotation?>(null) }
    val fireMarkers = remember { mutableStateListOf<PointAnnotation>() }
    val destinationMarker = remember { mutableStateOf<PointAnnotation?>(null) }
    val routeMarkers = remember { mutableListOf<PointAnnotation>() }

    // Ïù¥ÎØ∏ÏßÄ Î°úÎìú
    LaunchedEffect(Unit) {
        Log.d("EscapeRouteScreen", "‚úÖ EscapeRouteMapScreen ÏßÑÏûÖ")
        mapViewModel.fetchMapImage("222", "1001")
    }

    // ÎÇ¥ ÏúÑÏπò ÏöîÏ≤≠
    LaunchedEffect(currentLocationCode) {
        while (true) {
            currentLocationCode?.toInt()?.let {
                viewModel.fetchMyLocation(222, it)
            }
            kotlinx.coroutines.delay(2000) // 2Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
        }
    }

    // Î¨∏ÏûêÏó¥ Ï∏µÏùÑ API ÏΩîÎìúÎ°ú Î≥ÄÌôò
    fun floorStringToCode(floor: String): Int? {
        return when (floor) {
            "B1" -> 1001
            "B2" -> 1002
            "B3" -> 1003
            else -> null
        }
    }

    // Ï∏µ Î≥ÄÍ≤Ω Ïãú Ïù¥ÎØ∏ÏßÄ ÏöîÏ≤≠
    LaunchedEffect(selectedFloor.value) {
        val floorCode = floorStringToCode(selectedFloor.value)?.toString() ?: return@LaunchedEffect
        mapViewModel.fetchMapImage("222", floorCode)
    }

    // üî• Ïã§Ï†ú ÌôîÏû¨ Î∞úÏÉùÌïú ÎπÑÏΩò Ï§ë Ï≤´ Î≤àÏß∏ Ï∞æÍ∏∞
    val targetBeaconDto = fireNotificationDto
        ?.beaconNotificationDtos
        ?.firstOrNull { it.isNewFire == 1 }

    // ÏßÄÎèÑ Ï¥àÍ∏∞ Ïä§ÌÉÄÏùº ÏÑ§Ï†ï (ÏµúÏ¥à Ìïú Î≤àÎßå Ïã§Ìñâ)
    LaunchedEffect(imageUrl) {
        if (imageUrl != null) {
            mapView.mapboxMap.loadStyle(
                style {
                    +backgroundLayer("background") {
                        backgroundColor("#EFF0F1")
                    }
                    +image(
                        "marker-icon",
                        BitmapFactory.decodeResource(context.resources, R.drawable.ellipse)
                    ) {}
                    +image(
                        "fire-icon",
                        BitmapFactory.decodeResource(context.resources, R.drawable.fire)
                    ) {}
                    +image(
                        "destination-icon",
                        BitmapFactory.decodeResource(context.resources, R.drawable.goal)
                    ) {}
                    +imageSource("custom-map") {
                        url(imageUrl!!)
                        coordinates(
                            listOf(
                                convertPixelToLngLat(0, 0),
                                convertPixelToLngLat(imageWidth, 0),
                                convertPixelToLngLat(imageWidth, imageHeight),
                                convertPixelToLngLat(0, imageHeight)
                            )
                        )
                    }
                    +rasterLayer("custom-map-layer", "custom-map") {
                        rasterOpacity(1.0)
                    }
                }
            ) {
                var center = convertPixelToLngLat(imageWidth / 2, imageHeight / 2)
                // ÌôîÏû¨ÏïåÎûå Ï°¥Ïû¨ Ïãú ÏßÄÎèÑ Ï≤òÏùå ÏúÑÏπòÎ•º ÌôîÏû¨ ÏúÑÏπòÎ°ú
                if( !(fireNotificationDto?.beaconNotificationDtos?.isEmpty() ?: true)){
                    fireNotificationDto!!.beaconNotificationDtos.forEach { dto ->
                        if(dto.isNewFire == 1){
                            center = listOf(dto.coordX, dto.coordY)
                        }
                    }
                }
                mapView.mapboxMap.setCamera(
                    CameraOptions.Builder()
                        .center(Point.fromLngLat(center[0], center[1]))
                        .zoom(5.0)
                        .build()
                )
                mapView.mapboxMap.setBounds(
                    CameraBoundsOptions.Builder()
                        .bounds(
                            CoordinateBounds(
                                Point.fromLngLat(left, bottom),
                                Point.fromLngLat(right, top)
                            )
                        )
                        .build()
                )

                val annotationApi = mapView.annotations
                pointAnnotationManager.value = annotationApi.createPointAnnotationManager()
                polylineManager.value = annotationApi.createPolylineAnnotationManager()
            }
        }
    }

    // üîÅ ÎÇ¥ ÏúÑÏπò ÎßàÏª§Îßå Îî∞Î°ú Í¥ÄÎ¶¨
    LaunchedEffect(myLocation, selectedFloor.value, isTracking) {
        myLocationAnnotation.value?.let {
            pointAnnotationManager.value?.delete(it)
            myLocationAnnotation.value = null
        }
        val selectedFloorCode = floorStringToCode(selectedFloor.value)
        myLocation?.let { beacon ->
            if (beacon.floor == selectedFloorCode) {
                val marker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(beacon.coordX, beacon.coordY))
                    .withIconImage("marker-icon")
                    .withIconSize(0.15)
                myLocationAnnotation.value = pointAnnotationManager.value?.create(marker)
            }
        }
        // ÌòÑÏû¨ ÏúÑÏπò Ïπ¥Î©îÎùº Ï∂îÏ†Å
        if(isTracking?: false && myLocation != null){
            mapView.mapboxMap.flyTo(
                CameraOptions.Builder()
                    .center(Point.fromLngLat(myLocation!!.coordX, myLocation!!.coordY))
                    .zoom(5.0)
                    .build(),
                mapAnimationOptions {
                    duration(1500L)
                }
            )
        }
    }

    // ÌôîÏû¨ ÏúÑÏπòÎßå Îî∞Î°ú Í¥ÄÎ¶¨
    LaunchedEffect(fireNotificationDto, selectedFloor.value, showArrivalCard.value) {

        val selectedFloorCode = floorStringToCode(selectedFloor.value)
        Log.d("FireMarker", "üî• LaunchedEffect Ìò∏Ï∂úÎê®. ÌòÑÏû¨ Ï∏µ: $selectedFloorCode")

        pointAnnotationManager.value?.let { manager ->
            val fireBeacons = fireNotificationDto?.beaconNotificationDtos
                ?.filter { it.floor == selectedFloorCode } ?: run {
                Log.w("FireMarker", "‚ö†Ô∏è fireNotificationDtoÍ∞Ä nullÏù¥Í±∞ÎÇò Ìï¥Îãπ Ï∏µÏùò ÌôîÏû¨ ÏóÜÏùå")
                return@let
            }

            fireBeacons.forEachIndexed { index, beacon ->
                Log.d(
                    "FireMarker",
                    "üî• [$index] ÌôîÏû¨ ÎßàÏª§ ÏÉùÏÑ± ‚Üí coord=(${beacon.coordX}, ${beacon.coordY}), floor=${beacon.floor}, beaconCode=${beacon.beaconCode}"
                )
                val marker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(beacon.coordX, beacon.coordY))
                    .withIconImage("fire-icon")
                    .withIconSize(0.25)
                val fireMarker = manager.create(marker)


                // ‚úÖ ÎßàÏª§ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Îì±Î°ù
                manager.addClickListener { clicked ->
                    if (clicked == fireMarker) {
                        Log.d("FireMarker", "üî• ÌôîÏû¨ ÎßàÏª§ ÌÅ¥Î¶≠Îê®! ‚Üí Î™®Îã¨ Îã§Ïãú Ïó¥Í∏∞")

                        // beacon.beaconCodeÏôÄ fireNotification.stationIdÎ•º Ìï®Íªò ÏÇ¨Ïö©
                        val stationId = fireNotification?.stationId ?: 0
                        val beaconCode = beacon.beaconCode

                        viewModel.fetchCctvImage(stationId, beaconCode) { url ->
                            selectedFireBeaconDto.value = beacon.copy(imageUrl = url)
                            isFireNotificationCardVisible.value = true
                        }

                        isCardVisible.value = true
                        true
                    } else false
                }
            }
        }
    }

    // üîÅ Í≤ΩÎ°ú ÌëúÏãúÎèÑ Î∂ÑÎ¶¨Ìï¥ÏÑú Í¥ÄÎ¶¨
    LaunchedEffect(routePoints, showRoute.value, selectedFloor.value) {
        val selectedFloorCode = floorStringToCode(selectedFloor.value)


        // Í≤ΩÎ°ú Ïà®Í∏∞Í∏∞Í±∞ÎÇò Ìè¨Ïù∏Ìä∏ Î∂ÄÏ°±Ìï† Í≤ΩÏö∞ ÎùºÏù∏ & ÎßàÏª§ Î™®Îëê ÏÇ≠Ï†ú
        if (!showRoute.value || routePoints.isEmpty()) {

            polylineManager.value?.deleteAll()
            routeMarkers.forEach { marker -> pointAnnotationManager.value?.delete(marker) }
            routeMarkers.clear()


            return@LaunchedEffect
        }
        // ÎùºÏù∏Îßå ÏßÄÏö∞Í∏∞ (routePointsÍ∞Ä 1Í∞úÏù∏ Í≤ΩÏö∞)
        if (!showRoute.value || routePoints.size == 1) {

            polylineManager.value?.deleteAll()
            // ‚úÖ Î¨¥Ï°∞Í±¥ routePoints[0]Ïóê Î™©Ï†ÅÏßÄ ÎßàÏª§ ÌëúÏãú
            val destination = routePoints.first()
            Log.d("EscapeRouteMap", "üìç Î™©Ï†ÅÏßÄ ÎßàÏª§ Ï∂îÍ∞Ä: (${destination.x}, ${destination.y})")


            if (destination.floor == selectedFloorCode) {
                val endMarker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(destination.x, destination.y))
                    .withIconImage("destination-icon")
                    .withIconSize(0.15)
                pointAnnotationManager.value?.create(endMarker)
            }
            // ‚úÖ ÎÇ¥ ÏúÑÏπò ÎßàÏª§ (routePoints.last())
            val currentPosition = routePoints.last()


            // ‚úÖ ÎèÑÏ∞© Ïó¨Î∂Ä: Í∞ùÏ≤¥ Í∞í ÏùºÏπòÎ°úÎßå ÌåêÎã®
            if (destination.floor == currentPosition.floor &&
                destination.x == currentPosition.x &&
                destination.y == currentPosition.y
            )

            {
                Log.d("EscapeRouteMap", "üìç ÎèÑÏ∞©")
                if (!showArrivalCard.value) {
                    Log.d("EscapeRouteMap", "üéâ Î™©Ï†ÅÏßÄ ÎèÑÏ∞© (Ï¢åÌëú ÎèôÏùº) ‚Üí ÏïàÎÇ¥ Ïπ¥Îìú ÌëúÏãú")
                    showArrivalCard.value = true
                }
            } else {
                Log.w(
                    "EscapeRouteMap",
                    "‚ùå ÎèÑÏ∞© ÏïÑÎãò ‚Üí destination=(${destination.x}, ${destination.y}, floor=${destination.floor}) | " +
                            "current=(${currentPosition.x}, ${currentPosition.y}, floor=${currentPosition.floor})"
                )
            }
            return@LaunchedEffect
        }


        if (showRoute.value && routePoints.size >= 2) {
            Log.d("EscapeRouteMap", "üü© Ï†ÑÏ≤¥ Í≤ΩÎ°ú Ï¢åÌëú:")
            routePoints.forEachIndexed { index, point ->
                Log.d("EscapeRouteMap", "[$index] (${point.x}, ${point.y}) on floor ${point.floor}")
            }
            polylineManager.value?.deleteAll()
            routeMarkers.forEach { marker ->
                pointAnnotationManager.value?.delete(marker)
            }
            routeMarkers.clear()

            for (i in 0 until routePoints.size - 1) {
                val start = routePoints[i]
                val end = routePoints[i + 1]

                if (start.floor != selectedFloorCode || end.floor != selectedFloorCode) continue

                val polyline = PolylineAnnotationOptions()
                    .withPoints(
                        listOf(
                            Point.fromLngLat(start.x, start.y),
                            Point.fromLngLat(end.x, end.y)
                        )
                    )
                    .withLineColor("#8AEA52")
                    .withLineWidth(6.0)
                polylineManager.value?.create(polyline)
            }

            // ‚úÖ Î¨¥Ï°∞Í±¥ routePoints[0]Ïóê Î™©Ï†ÅÏßÄ ÎßàÏª§ ÌëúÏãú
            val destination = routePoints.first()
            Log.d("EscapeRouteMap", "üìç Î™©Ï†ÅÏßÄ ÎßàÏª§ Ï∂îÍ∞Ä: (${destination.x}, ${destination.y})")


            if (destination.floor == selectedFloorCode) {
                val marker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(destination.x, destination.y))
                    .withIconImage("destination-icon")
                    .withIconSize(0.2)
                destinationMarker.value = pointAnnotationManager.value?.create(marker)
            }
            // ‚úÖ ÎÇ¥ ÏúÑÏπò ÎßàÏª§ (routePoints.last())
            val currentPosition = routePoints.last()

            // ‚úÖ ÎèÑÏ∞© Ïó¨Î∂Ä: Í∞ùÏ≤¥ Í∞í ÏùºÏπòÎ°úÎßå ÌåêÎã®
            if (destination.floor == currentPosition.floor &&
                destination.x == currentPosition.x &&
                destination.y == currentPosition.y
            ) {
                Log.d("EscapeRouteMap", "üìç ÎèÑÏ∞©")
                if (!showArrivalCard.value) {
                    Log.d("EscapeRouteMap", "üéâ Î™©Ï†ÅÏßÄ ÎèÑÏ∞© (Ï¢åÌëú ÎèôÏùº) ‚Üí ÏïàÎÇ¥ Ïπ¥Îìú ÌëúÏãú")
                    showArrivalCard.value = true

//                    // Î™©Ï†ÅÏßÄ ÎßàÏª§Îßå Ï†úÍ±∞
//                    destinationMarker.value?.let {
//                        pointAnnotationManager.value?.delete(it)
//                        destinationMarker.value = null
//                    }
                }
            } else {
                    Log.w(
                        "EscapeRouteMap",
                        "‚ùå ÎèÑÏ∞© ÏïÑÎãò ‚Üí destination=(${destination.x}, ${destination.y}, floor=${destination.floor}) | " +
                                "current=(${currentPosition.x}, ${currentPosition.y}, floor=${currentPosition.floor})"
                    )
                }

        }
    }

    // ÏïàÎÇ¥ Ï¢ÖÎ£å Î™®Îã¨
    LaunchedEffect(showArrivalCard.value) {
        if (showArrivalCard.value) {
            kotlinx.coroutines.delay(10000)
            showArrivalCard.value = false
            isGuiding.value = false // ‚úÖ ÏïàÎÇ¥ Ï¢ÖÎ£å Î≤ÑÌäºÎèÑ Ìï®Íªò ÏÇ¨ÎùºÏßÄÍ≤å

            // ÎèÑÏ∞©ÏßÄ ÎßàÏª§ Ï†úÍ±∞
            destinationMarker.value?.let {
                pointAnnotationManager.value?.delete(it)
                destinationMarker.value = null
            }

            // Í≤ΩÎ°ú ÎßàÏª§ Ï†úÍ±∞
            routeMarkers.forEach {
                pointAnnotationManager.value?.delete(it)
            }
            routeMarkers.clear()

            // Í≤ΩÎ°ú ÏÑ† Ï†úÍ±∞
            polylineManager.value?.deleteAll()
        }
    }


// UI Íµ¨ÏÑ±
Box(
    modifier = Modifier
        .fillMaxSize()
        .clickable {
            if (isCardVisible.value) {
                Log.d("EscapeRouteUI", "üõë ÌôîÎ©¥ ÌÅ¥Î¶≠ ‚Üí ÌôîÏû¨ Î™®Îã¨ Îã´Í∏∞")
                isCardVisible.value = false
            }
        }
) {
    // 1. ÏßÄÎèÑ Î∞∞Í≤Ω
    AndroidView(factory = { mapView })

    // ÌôîÏû¨ Ïó≠Ï†ïÎ≥¥ Î™®Îã¨
    if (isCardVisible.value && targetBeaconDto?.imageUrl?.isNotEmpty() == true && fireNotification != null) {
        LaunchedEffect(Unit) {
            // ÏµúÏ¥à ÏßÑÏûÖ Ïãú FireStation Ìïú Î≤àÎßå Î≥¥Ïó¨Ï§å
            isFireStationShown.value = true
        }
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(top = 60.dp),
            contentAlignment = Alignment.TopCenter // ‚úÖ Ïó¨Í∏∞ÏóêÏÑú ÏúÑÏπò Í≥†Ï†ï!
        ) {
            AnimatedVisibility(
                visible = true,
                enter = slideInVertically(initialOffsetY = { -100 }) + fadeIn(),
                exit = slideOutVertically(targetOffsetY = { -100 }) + fadeOut()
            ) {
                FireStation(
                    stationName = fireNotification.stationName,
                    status = "ÌôîÏû¨ Î∞úÏÉù",
                    gateName = targetBeaconDto.beaconName,
                    onDismiss = {
                        Log.d("FireModal", "üõë Î™®Îã¨ Îã´Í∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠")
                        isFireStationShown.value = false
                    },
                )
            }
        }
    }

    // ‚úÖ ÎèÑÏ∞© ÏïåÎ¶º Ïπ¥Îìú
    if (showArrivalCard.value) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
        ) {
            ArrivalCard(
                onDismiss = {
                    showArrivalCard.value = false
                    isGuiding.value = false
//                    pointAnnotationManager.value?.deleteAll()
                },
                onRetry = {
                    Log.d("ArrivalCard", "üîÅ Í≤ΩÎ°ú Ïû¨ÏïàÎÇ¥ ÏöîÏ≤≠")
                    showArrivalCard.value = false
                    isGuiding.value = true
                    showRoute.value = true

                    currentLocationCode?.let {
                        viewModel.fetchEscapeRoute(it, it)
                    }
                },
                modifier = Modifier
                    .align(Alignment.TopCenter)
                    .padding(top = 24.dp)
            )
        }
    }

    // 2. Ïò§Î≤ÑÎ†àÏù¥ Ï†ÑÏ≤¥ (Ï∏µ Î≤ÑÌäº, ÏïàÎÇ¥ Î≤ÑÌäº Îì±)
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.SpaceBetween
    ) {
        Spacer(modifier = Modifier.height(12.dp)) // ÏÉÅÎã® Í≥µÍ∞Ñ

        // ‚úÖ Î≤ÑÌäº ÏòÅÏó≠
        Box(modifier = Modifier.fillMaxWidth()) {
            Column(
                modifier = Modifier
                    .align(Alignment.BottomStart)
                    .padding(start = 16.dp,
                        bottom = 50.dp),
                horizontalAlignment = Alignment.Start
            ) {
                FloorSelector(
                    selectedFloor = selectedFloor.value,
                    onFloorSelected = { selectedFloor.value = it }
                )
                if (!showArrivalCard.value) {
                    Spacer(modifier = Modifier.height(16.dp))
                    EvacuationButton(
                        isGuiding = isGuiding.value,
                        onClick = {
                            if (isGuiding.value) {
                                // ‚úÖ ÏïàÎÇ¥ Ï¢ÖÎ£å Ï≤òÎ¶¨
                                isGuiding.value = false
                                showRoute.value = false
                                polylineManager.value?.deleteAll()
                                goalMarker.value?.let { pointAnnotationManager.value?.delete(it) }
                                myLocationAnnotation.value?.let { pointAnnotationManager.value?.delete(it) }
                                viewModel.setIsTracking(false)
                            } else {
                                // ‚úÖ ÏïàÎÇ¥ ÏãúÏûë
                                currentLocationCode?.let { code ->
                                    viewModel.fetchEscapeRoute(222, code)
                                    showRoute.value = true
                                    isGuiding.value = true
                                    viewModel.setIsTracking(true)
                                }
                            }
                        }
                    )
                }
                }
        }
    }
    // ‚úÖ üî• ÌôîÏû¨ Ïã§ÏãúÍ∞Ñ ÏÇ¨ÏßÑ
        if (isFireNotificationCardVisible.value && selectedFireBeaconDto.value != null) {
            // ‚úÖ üî• ÏÉÅÏÑ∏ Î™®Îã¨ (FireNotificationCard ‚Üí FireDetailBottomSheet ÍµêÏ≤¥)
            AnimatedVisibility(
                visible = isCardVisible.value && targetBeaconDto?.imageUrl?.isNotEmpty() == true,
                enter = slideInVertically(initialOffsetY = { it }) + fadeIn(),
                exit = slideOutVertically(targetOffsetY = { it }) + fadeOut()
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .pointerInput(Unit) {
                            detectTapGestures(
                                onTap = {
                                    Log.d("FireModal", "üõë Î∞∞Í≤Ω ÌÅ¥Î¶≠ ‚Üí Î™®Îã¨ Îã´Í∏∞")
                                    isCardVisible.value = false
                                }
                            )
                        }
                ) {
                    Box(
                        modifier = Modifier
                            .align(Alignment.BottomCenter)
                            .clickable(
                                interactionSource = remember { MutableInteractionSource() },
                                indication = null
                            ) { /* ÎÇ¥Î∂Ä ÌÉ≠ Î¨¥Ïãú */ }
                    ) {
                        FireNotificationCard(
                            beaconName = targetBeaconDto?.beaconName ?: "Ïïå Ïàò ÏóÜÏùå",
                            imageUrl = targetBeaconDto?.imageUrl ?: "",
                            isVisible = isCardVisible.value,
                            onDismiss = {
                                Log.d("FireModal", "üõë Î™®Îã¨ Îã´Í∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠")
                                isFireNotificationCardVisible.value = false
                            },
                            onGuideClick = {
                                Log.d("FireModal", "‚û°Ô∏è ÎåÄÌîº Í≤ΩÎ°ú Ï∞æÍ∏∞ ÌÅ¥Î¶≠Îê®")
                                isFireNotificationCardVisible.value = false
                                currentLocationCode?.let { code ->
                                    viewModel.fetchEscapeRoute(222, code)
                                    showRoute.value = true
                                    isGuiding.value = true
                                }
                            }
                        )
                    }
                }
            }
        }
    }
}

