package com.ssafy.jangan_mobile.ui.screen

import android.graphics.BitmapFactory
import android.util.Log
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.mapbox.geojson.Point
import com.mapbox.maps.CameraBoundsOptions
import com.mapbox.maps.CameraOptions
import com.mapbox.maps.CoordinateBounds
import com.mapbox.maps.MapView
import com.mapbox.maps.extension.style.image.image
import com.mapbox.maps.extension.style.layers.generated.backgroundLayer
import com.mapbox.maps.extension.style.layers.generated.rasterLayer
import com.mapbox.maps.extension.style.sources.generated.imageSource
import com.mapbox.maps.extension.style.style
import com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions
import com.mapbox.maps.plugin.annotation.annotations
import com.mapbox.maps.plugin.annotation.generated.PointAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.createPointAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.createPolylineAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions
import com.mapbox.maps.plugin.gestures.gestures
import com.ssafy.jangan_mobile.R
import com.ssafy.jangan_mobile.service.dto.BeaconNotificationDto
import com.ssafy.jangan_mobile.service.dto.FireNotificationDto
import com.ssafy.jangan_mobile.store.FireNotificationStore
import com.ssafy.jangan_mobile.ui.component.EvacuationButton
import com.ssafy.jangan_mobile.ui.component.FloorSelector
import com.ssafy.jangan_mobile.ui.component.StationStatusCard
import com.ssafy.jangan_mobile.ui.viewmodel.MapViewModel
import com.ssafy.jangan_mobile.viewmodel.EscapeRouteViewModel

@Composable
fun EscapeRouteMapScreen(
    navController: NavController,
    viewModel: EscapeRouteViewModel = viewModel(),
    mapViewModel: MapViewModel = hiltViewModel()
) {
    val context = LocalContext.current
    val mapView = remember { MapView(context) }

    val fireNotificationDto: FireNotificationDto? by FireNotificationStore.fireNotificationDto.observeAsState()
    val currentLocationCode by FireNotificationStore.currentLocationBeaconCode.observeAsState()
    val routePoints by viewModel.route.observeAsState(emptyList())
    val imageUrl by mapViewModel.mapImageUrl.collectAsState()

    val showRoute = remember { mutableStateOf(false) }

    val selectedFloor = remember { mutableStateOf("B3") }

    //ÏßÄÎèÑÏóê ÏÇ¨Ïö©Ìï† ÎßàÏª§ Î∞è ÏÑ† Í¥ÄÎ¶¨
    val pointAnnotationManager = remember { mutableStateOf<PointAnnotationManager?>(null) }
    val polylineManager = remember { mutableStateOf<PolylineAnnotationManager?>(null) }

    // Ïù¥ÎØ∏ÏßÄ ÏúÑÏπò Í≥ÑÏÇ∞ Í¥ÄÎ†® ÏÑ§Ï†ï
    val imageWidth = 5000
    val imageHeight = 7800
    val aspectRatio = imageWidth.toDouble() / imageHeight.toDouble()
    val coordinateHeight = 60.0
    val coordinateWidth = coordinateHeight * aspectRatio
    val top = coordinateHeight / 2
    val bottom = -coordinateHeight / 2
    val left = -coordinateWidth / 2
    val right = coordinateWidth / 2


    fun convertPixelToLngLat(x: Int, y: Int): List<Double> {
        val lng = left + (x.toDouble() / imageWidth) * (right - left)
        val lat = top - (y.toDouble() / imageHeight) * (top - bottom)
        return listOf(lng, lat)
    }

    // Î¨∏ÏûêÏó¥ Ï∏µÏùÑ API ÏΩîÎìúÎ°ú Î≥ÄÌôò
    fun floorStringToCode(floor: String): Int? {
        return when (floor) {
            "B1" -> 1001
            "B2" -> 1002
            "B3" -> 1003
            else -> null
        }
    }

    // Ïù¥ÎØ∏ÏßÄ Î°úÎìú
    LaunchedEffect(Unit) {
        Log.d("EscapeRouteScreen", "‚úÖ EscapeRouteMapScreen ÏßÑÏûÖ")
        mapViewModel.fetchMapImage("222")
    }

    // ÏßÄÎèÑ Ïä§ÌÉÄÏùº Î∞è ÎßàÏª§ Í∞±Ïã†
    LaunchedEffect(imageUrl, fireNotificationDto, currentLocationCode, routePoints) {
        Log.d("EscapeRouteScreen", "‚úÖ ÏßÄÎèÑ Í∞±Ïã† Ï°∞Í±¥ Î∞úÏÉù")
        if (imageUrl != null) {
            mapView.mapboxMap.loadStyle(
                style {
                    +backgroundLayer("background") {
                        backgroundColor("#EFF0F1")
                    }
                    +image(
                        "marker-icon",
                        BitmapFactory.decodeResource(context.resources, R.drawable.marker_icon)
                    ) {}
                    +image(
                        "fire-icon",
                        BitmapFactory.decodeResource(context.resources, R.drawable.fire)
                    ) {}
                    +imageSource("custom-map") {
                        url(imageUrl!!)
                        coordinates(
                            listOf(
                                convertPixelToLngLat(0, 0),
                                convertPixelToLngLat(imageWidth, 0),
                                convertPixelToLngLat(imageWidth, imageHeight),
                                convertPixelToLngLat(0, imageHeight),
                            )
                        )
                    }
                    +rasterLayer("custom-map-layer", "custom-map") {
                        rasterOpacity(1.0)
                    }
                }
            ) {
                val center = convertPixelToLngLat(imageWidth / 2, imageHeight / 2)
                mapView.getMapboxMap().setCamera(
                    CameraOptions.Builder()
                        .center(Point.fromLngLat(center[0], center[1]))
                        .zoom(1.0)
                        .build()
                )

                mapView.mapboxMap.setBounds(
                    CameraBoundsOptions.Builder()
                        .bounds(
                            CoordinateBounds(
                                Point.fromLngLat(left, bottom),
                                Point.fromLngLat(right, top)
                            )
                        )
                        .build()
                )


                mapView.gestures.pitchEnabled = true
                mapView.gestures.rotateEnabled = true
                mapView.gestures.doubleTapToZoomInEnabled = true

                // Í∏∞Ï°¥ ÎßàÏª§ Î∞è ÏÑ† ÏÇ≠Ï†ú
                pointAnnotationManager.value?.deleteAll()
                polylineManager.value?.deleteAll()


                val annotationApi = mapView.annotations
                pointAnnotationManager.value = annotationApi.createPointAnnotationManager()
                polylineManager.value = annotationApi.createPolylineAnnotationManager()


                val selectedFloorCode = floorStringToCode(selectedFloor.value)


                // üî• ÌôîÏû¨ ÏúÑÏπò
                Log.d(
                    "EscapeRouteScreen",
                    "üî• fireNotificationDto = $fireNotificationDto $fireNotificationDto?.stationId $fireNotificationDto?.stationName"
                )
                fireNotificationDto?.beaconNotificationDtos?.forEach {
                    Log.d("EscapeRouteScreen", "üî• beacon = $it")
                }
                Log.d("EscapeRouteScreen", "üìç currentLocationCode = $currentLocationCode")


//                fireNotificationDto?.beaconNotificationDtos?.forEach { beacon ->
//                    val pos = convertPixelToLngLat(beacon.coordX, beacon.coordY)
//                    val fireMarker = PointAnnotationOptions()
//                        .withPoint(Point.fromLngLat(pos[0], pos[1]))
//                        .withIconImage("fire-icon")
//                    pointAnnotationManager.value?.create(fireMarker)
//                }

                fireNotificationDto?.beaconNotificationDtos
                    ?.filter { it.floor == selectedFloorCode }
                    ?.forEach { beacon ->
                        val pos = convertPixelToLngLat(beacon.coordX, beacon.coordY)
                        val fireMarker = PointAnnotationOptions()
                            .withPoint(Point.fromLngLat(pos[0], pos[1]))
                            .withIconImage("fire-icon")
                        pointAnnotationManager.value?.create(fireMarker)
                    }


                // üßç ÎÇ¥ ÏúÑÏπò
//                fireNotificationDto?.beaconNotificationDtos
//                    ?.find { it.beaconCode == currentLocationCode }
//                    ?.let { beacon ->
//                        val pos = convertPixelToLngLat(beacon.coordX, beacon.coordY)
//                        val myMarker = PointAnnotationOptions()
//                            .withPoint(Point.fromLngLat(pos[0], pos[1]))
//                            .withIconImage("marker-icon")
//                        pointAnnotationManager.value?.create(myMarker)
//                    }
                fireNotificationDto?.beaconNotificationDtos
                    ?.find { it.beaconCode == currentLocationCode && it.floor == selectedFloorCode }
                    ?.let { beacon ->
                        val pos = convertPixelToLngLat(beacon.coordX, beacon.coordY)
                        val myMarker = PointAnnotationOptions()
                            .withPoint(Point.fromLngLat(pos[0], pos[1]))
                            .withIconImage("marker-icon")
                        pointAnnotationManager.value?.create(myMarker)
                    }

                // Í≤ΩÎ°ú Ïó∞Í≤∞
//                if (showRoute.value && routePoints.isNotEmpty()) {
//                    Log.d("EscapeRouteScreen", "‚úÖ Í≤ΩÎ°ú ÌëúÏãú: ${routePoints.size}Í∞ú ÏßÄÏ†ê")
//                    val polylineManager = annotationApi.createPolylineAnnotationManager()
//                    val polyline = PolylineAnnotationOptions()
//                        .withPoints(routePoints.map {
//                            val lngLat = convertPixelToLngLat(it.x, it.y)
//                            Point.fromLngLat(lngLat[0], lngLat[1])
//                        })
//                        .withLineColor("#00FF00")
//                        .withLineWidth(6.0)
//                    polylineManager.create(polyline)
//                }
//                if (showRoute.value && routePoints.isNotEmpty()) {
//                    val selectedFloorInt = selectedFloor.value.toIntOrNull()
//                    val filteredRoute = if (selectedFloorInt != null) {
//                        routePoints.filter { it.floor == selectedFloorInt }
//                    } else {
//                        emptyList()
//                    }
//
//                    if (filteredRoute.isNotEmpty()) {
//                        val polyline = PolylineAnnotationOptions()
//                            .withPoints(filteredRoute.map {
//                                val lngLat = convertPixelToLngLat(it.x, it.y)
//                                Point.fromLngLat(lngLat[0], lngLat[1])
//                            })
//                            .withLineColor("#00FF00")
//                            .withLineWidth(6.0)
//                        polylineManager.value?.create(polyline)
//                    }
//                }
                if (showRoute.value && routePoints.isNotEmpty()) {
                    val filteredRoute = routePoints.filter { it.floor == selectedFloorCode }
                    if (filteredRoute.isNotEmpty()) {
                        // Ï¢åÌëúÎì§ÏùÑ ÏàúÏÑúÎåÄÎ°ú ÏÑ† Ïó∞Í≤∞ÌïòÍ∏∞
                        val polyline = PolylineAnnotationOptions()
                            .withPoints(filteredRoute.map {
                                val lngLat = convertPixelToLngLat(it.x, it.y)
                                Point.fromLngLat(lngLat[0], lngLat[1])
                            })
                            .withLineColor("#00FF00")
                            .withLineWidth(6.0)
                        polylineManager.value?.create(polyline)
                    }
                }
            }
        }
    }

    // UI Íµ¨ÏÑ±
    Box(modifier = Modifier.fillMaxSize()) {
        // 1. ÏßÄÎèÑ Î∑∞ (Î∞∞Í≤Ω Ïó≠Ìï†)
        AndroidView(factory = { mapView })

        // 2 Ï†ÑÏ≤¥ Ïò§Î≤ÑÎ†àÏù¥
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.SpaceBetween
        ) {
            Column {
                // üî• ÌôîÏû¨ ÏÉÅÌÉú Ïπ¥Îìú
                fireNotificationDto?.let {
                    StationStatusCard(
                        stationName = "", // ‚úÖ Ïã§Ï†ú Ïó≠ Ïù¥Î¶ÑÏúºÎ°ú ÍµêÏ≤¥
                        status = "ÌôîÏû¨ Î∞úÏÉù",
                        gateName = "B3 Í∞úÏ∞∞Íµ¨"
                    )

                    Spacer(modifier = Modifier.height(16.dp))
                }

                // ‚¨ÜÔ∏è Ï∏µ ÏÑ†ÌÉù Ïª¥Ìè¨ÎÑåÌä∏ (Ïò§Î•∏Ï™Ω ÏúÑÏóê Î∞∞ÏπòÌïòÍ±∞ÎÇò ÏúÑÏπò Ï°∞Ï†ï Í∞ÄÎä•)
                FloorSelector(
                    selectedFloor = selectedFloor.value,
                    onFloorSelected = { selectedFloor.value = it },
                    modifier = Modifier
                        .padding(bottom = 80.dp)
                )
            }
            EvacuationButton(
                onClick = {
                    currentLocationCode?.let { code ->
                        viewModel.fetchEscapeRoute(222, code)
                        showRoute.value = true
                    }
                },
                modifier = Modifier
                    .padding(bottom = 50.dp)
            )
            // üë£ ÎåÄÌîº Í≤ΩÎ°ú ÏïàÎÇ¥ Î≤ÑÌäº

        }
    }
}



// Ïò§Î©¥ÏùÄ Í≤ΩÎ°ú Ïó∞Í≤∞ÌïòÍ∏∞
// ÌôîÏû¨ Ïù¥ÎØ∏ÏßÄ Î∂àÎü¨Ïò§Îäî Ïª¥Ìè¨ÎÑåÌä∏ Îã§ÏãúÌïòÍ∏∞
// ÏúÑÍ≤ΩÎèÑ Î∞îÍæ∏Í∏∞
// api ÏÉùÍ∏∞Î©¥, Ï∂úÍµ¨ Ïù∏ÏãùÌï¥ÏÑú ÏïàÎÇ¥Ï¢ÖÎ£å Ïª¥Ìè¨ÎÑåÌä∏ ÌïòÍ∏∞
// ÎÇ¥ÏúÑÏπò api ÏÉùÍ∏∞Î©¥ ÎÇ¥ÏúÑÏπò ÎßàÏª§ Ïó∞Í≤∞ÌïòÍ∏∞




//package com.ssafy.jangan_mobile.ui.screen
//
//import android.graphics.BitmapFactory
//import androidx.compose.foundation.layout.*
//import androidx.compose.material3.*
//import androidx.compose.runtime.*
//import androidx.compose.runtime.livedata.observeAsState
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.graphics.Color
//import androidx.compose.ui.platform.LocalContext
//import androidx.compose.ui.res.painterResource
//import androidx.compose.ui.unit.dp
//import androidx.hilt.navigation.compose.hiltViewModel
//import androidx.navigation.NavController
//import com.mapbox.geojson.Point
//import com.mapbox.maps.CameraBoundsOptions
//import com.mapbox.maps.CameraOptions
//import com.mapbox.maps.CoordinateBounds
//import com.mapbox.maps.MapboxMap
//import com.mapbox.maps.extension.compose.MapboxMap
//import com.mapbox.maps.compose.annotation.*
//import com.mapbox.maps.compose.style.sources.generated.imageSource
//import com.mapbox.maps.compose.style.layers.generated.backgroundLayer
//import com.mapbox.maps.compose.style.layers.generated.rasterLayer
//import com.mapbox.maps.compose.style.*
//import com.mapbox.maps.extension.style.layers.generated.backgroundLayer
//import com.ssafy.jangan_mobile.R
//import com.ssafy.jangan_mobile.store.FireNotificationStore
//import com.ssafy.jangan_mobile.ui.viewmodel.MapViewModel
//import com.ssafy.jangan_mobile.viewmodel.EscapeRouteViewModel
//
//@Composable
//fun EscapeRouteMapScreen(
//    navController: NavController,
//    viewModel: EscapeRouteViewModel = hiltViewModel(),
//    mapViewModel: MapViewModel = hiltViewModel()
//) {
//    val context = LocalContext.current
//
//    val fireNotificationDto by FireNotificationStore.fireNotificationDto.observeAsState()
//    val currentLocationCode by FireNotificationStore.currentLocationBeaconCode.observeAsState()
//    val routePoints by viewModel.route.observeAsState(emptyList())
//    val imageUrl by mapViewModel.mapImageUrl.collectAsState()
//
//    val showRoute = remember { mutableStateOf(false) }
//
//    // ÏßÄÎèÑ Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞ Î∞è Î≤îÏúÑ ÏÑ§Ï†ï
//    val imageWidth = 5000
//    val imageHeight = 7800
//    val aspectRatio = imageWidth.toDouble() / imageHeight.toDouble()
//    val coordinateHeight = 60.0
//    val coordinateWidth = coordinateHeight * aspectRatio
//    val top = coordinateHeight / 2
//    val bottom = -coordinateHeight / 2
//    val left = -coordinateWidth / 2
//    val right = coordinateWidth / 2
//
//    fun convertPixelToLngLat(x: Int, y: Int): List<Double> {
//        val lng = left + (x.toDouble() / imageWidth) * (right - left)
//        val lat = top - (y.toDouble() / imageHeight) * (top - bottom)
//        return listOf(lng, lat)
//    }
//
//    LaunchedEffect(Unit) {
//        mapViewModel.fetchMapImage("222")
//    }
//
//    val markerIcon = rememberIconImage(
//        key = "marker-icon",
//        painter = painterResource(R.drawable.marker_icon)
//    )
//    val fireIcon = rememberIconImage(
//        key = "fire-icon",
//        painter = painterResource(R.drawable.fire)
//    )
//
//    Box(modifier = Modifier.fillMaxSize()) {
//        if (imageUrl != null) {
//            MapboxMap(
//                modifier = Modifier.fillMaxSize(),
//                cameraOptions = CameraOptions.Builder()
//                    .center(Point.fromLngLat(0.0, 0.0))
//                    .zoom(1.0)
//                    .build(),
//                cameraBounds = CameraBoundsOptions.Builder()
//                    .bounds(CoordinateBounds(
//                        Point.fromLngLat(left, bottom),
//                        Point.fromLngLat(right, top)
//                    )).build(),
//                style = {
//                    backgroundLayer("background") {
//                        backgroundColor("#EFF0F1")
//                    }
//                    imageSource("custom-map") {
//                        url(imageUrl!!)
//                        coordinates(
//                            listOf(
//                                convertPixelToLngLat(0, 0),
//                                convertPixelToLngLat(imageWidth, 0),
//                                convertPixelToLngLat(imageWidth, imageHeight),
//                                convertPixelToLngLat(0, imageHeight)
//                            )
//                        )
//                    }
//                    rasterLayer("custom-map-layer", "custom-map") {
//                        rasterOpacity(1.0)
//                    }
//                }
//            ) {
//                // üî• ÌôîÏû¨ ÎßàÏª§ ÌëúÏãú
//                fireNotificationDto?.beaconNotificationDtos?.forEach { beacon ->
//                    val pos = convertPixelToLngLat(beacon.coordX, beacon.coordY)
//                    PointAnnotation(point = Point.fromLngLat(pos[0], pos[1])) {
//                        iconImage = fireIcon
//                    }
//                }
//
//                // üßç ÎÇ¥ ÏúÑÏπò ÎßàÏª§ ÌëúÏãú
//                fireNotificationDto?.beaconNotificationDtos
//                    ?.find { it.beaconCode == currentLocationCode }
//                    ?.let { beacon ->
//                        val pos = convertPixelToLngLat(beacon.coordX, beacon.coordY)
//                        PointAnnotation(point = Point.fromLngLat(pos[0], pos[1])) {
//                            iconImage = markerIcon
//                        }
//                    }
//
//                // ‚û§ ÎåÄÌîº Í≤ΩÎ°ú ÌëúÏãú
//                if (showRoute.value && routePoints.isNotEmpty()) {
//                    PolylineAnnotation(
//                        points = routePoints.map {
//                            val lngLat = convertPixelToLngLat(it.x, it.y)
//                            Point.fromLngLat(lngLat[0], lngLat[1])
//                        }
//                    ) {
//                        lineColor = Color.Green
//                        lineWidth = 6.0
//                    }
//                }
//            }
//        }
//
//        // Î≤ÑÌäº UI
//        fireNotificationDto?.let {
//            Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {
//                Text("\uD83D\uDD25 ÌôîÏû¨ Î∞úÏÉù!", color = Color.Red)
//                Spacer(modifier = Modifier.height(8.dp))
//                Button(onClick = {
//                    viewModel.loadMockRoute()
//                    showRoute.value = true
//                }) {
//                    Text("ÎåÄÌîºÍ≤ΩÎ°ú ÌÖåÏä§Ìä∏")
//                }
//                Button(onClick = {
//                    currentLocationCode?.let { code ->
//                        viewModel.fetchEscapeRoute(222, code)
//                        showRoute.value = true
//                    }
//                }) {
//                    Text("ÎåÄÌîºÍ≤ΩÎ°ú Ï∞æÍ∏∞")
//                }
//            }
//        }
//    }
//}




//
//import android.content.Context
//import android.graphics.BitmapFactory
//import android.os.Bundle
//import android.util.Log
//import androidx.activity.ComponentActivity
//import androidx.activity.compose.setContent
//import androidx.compose.foundation.layout.Box
//import androidx.compose.foundation.layout.fillMaxSize
//import androidx.compose.foundation.layout.padding
//import androidx.compose.material3.Scaffold
//import androidx.compose.runtime.*
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.graphics.Color
//import androidx.compose.ui.platform.LocalContext
//import androidx.compose.ui.viewinterop.AndroidView
//import androidx.lifecycle.ViewModel
//import androidx.lifecycle.viewModelScope
//import androidx.lifecycle.viewmodel.compose.viewModel
//import androidx.navigation.NavController
//import com.ssafy.jangan_mobile.model.LatLngData
//import com.ssafy.jangan_mobile.service.RetrofitInstance
//import com.mapbox.maps.MapView
//import com.mapbox.maps.Style
//import com.mapbox.geojson.Point
//import com.mapbox.maps.extension.style.image.image
//import com.mapbox.maps.extension.style.layers.generated.rasterLayer
//import com.mapbox.maps.extension.style.sources.generated.imageSource
//import com.mapbox.maps.extension.style.style
//import com.mapbox.maps.plugin.annotation.generated.PointAnnotationManager
//import com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions
//import com.mapbox.maps.plugin.annotation.annotations
//import com.mapbox.maps.plugin.annotation.generated.createPointAnnotationManager
//import com.ssafy.jangan_mobile.ui.theme.JanganmobileTheme
//import com.ssafy.jangan_mobile.ui.viewmodel.MapViewModel
//import kotlinx.coroutines.launch
//import com.ssafy.jangan_mobile.R
//import com.mapbox.maps.extension.style.expressions.dsl.generated.literal
//import com.mapbox.maps.extension.style.layers.generated.rasterLayer
//import com.mapbox.maps.extension.style.sources.generated.imageSource
//import com.mapbox.maps.extension.style.style
//import com.mapbox.maps.extension.style.image.image
//import com.mapbox.maps.CameraOptions
//import com.mapbox.maps.CameraBoundsOptions
//import com.mapbox.geojson.BoundingBox
//import com.mapbox.maps.CoordinateBounds
//import com.mapbox.maps.extension.style.layers.generated.backgroundLayer
//import com.mapbox.maps.plugin.gestures.gestures
//
//@Composable
//fun MapViewScreen(navController: NavController) {
//    val viewModel: MapViewModel = viewModel()
//    val context = LocalContext.current
//    val mapView = remember { MapView(context) }
//
//    val imageUrl by viewModel.mapImageUrl.collectAsState()
//
//    val imageWidth = 5000
//    val imageHeight = 7800
//    val aspectRatio = imageWidth.toDouble() / imageHeight.toDouble()
//
//    val coordinateHeight = 60.0
//    val coordinateWidth = coordinateHeight * aspectRatio
//
//    val top = coordinateHeight / 2
//    val bottom = -coordinateHeight / 2
//    val left = -coordinateWidth / 2
//    val right = coordinateWidth / 2
//
//    fun convertPixelToLngLat(x: Int, y: Int): List<Double> {
//        val lng = left + (x.toDouble() / imageWidth) * (right - left)
//        val lat = top - (y.toDouble() / imageHeight) * (top - bottom)
//        return listOf(lng, lat)
//    }
//
//    LaunchedEffect(Unit) {
//        viewModel.fetchMapImage("222")
//    }
//
//    LaunchedEffect(imageUrl) {
//        if (imageUrl != null) {
//            mapView.getMapboxMap().loadStyle(
//                style {
//                    // üëá ÌöåÏÉâ Î∞∞Í≤Ω Î†àÏù¥Ïñ¥ Î®ºÏ†Ä Ï∂îÍ∞Ä
//                    +backgroundLayer("background") {
//                        backgroundColor("#EFF0F1") // ÏõêÌïòÎäî Î∞∞Í≤ΩÏÉâÏúºÎ°ú ÏÑ§Ï†ï
//                    }
//
//                    +image("marker-icon", BitmapFactory.decodeResource(context.resources, R.drawable.marker_icon)) {}
//
//                    +imageSource("custom-map") {
//                        url(imageUrl!!)
//                        coordinates(
//                            listOf(
//                                convertPixelToLngLat(0, 0),
//                                convertPixelToLngLat(imageWidth, 0),
//                                convertPixelToLngLat(imageWidth, imageHeight),
//                                convertPixelToLngLat(0, imageHeight),
//                            )
//                        )
//                    }
//
//                    +rasterLayer("custom-map-layer", "custom-map") {
//                        rasterOpacity(1.0)
//                    }
//                }
//            ) {
//                val center = convertPixelToLngLat(imageWidth / 2, imageHeight / 2)
//                mapView.getMapboxMap().setCamera(
//                    CameraOptions.Builder()
//                        .center(Point.fromLngLat(center[0], center[1]))
//                        .zoom(1.0)
//                        .pitch(0.0)
//                        .bearing(0.0)
//                        .build()
//                )
//
//                mapView.getMapboxMap().setBounds(
//                    com.mapbox.maps.CameraBoundsOptions.Builder()
//                        .minZoom(1.0)
//                        .maxZoom(8.0)
//                        .bounds(
//                            CoordinateBounds(
//                                Point.fromLngLat(left, bottom),
//                                Point.fromLngLat(right, top)
//                            )
//                        )
//                        .build()
//                )
//
//                mapView.gestures.pitchEnabled = true // ÌöåÏ†Ñ ÌóàÏö©
//                mapView.gestures.rotateEnabled = true
//                mapView.gestures.doubleTapToZoomInEnabled = true // ÎçîÎ∏îÌÉ≠ Ï§åÏù∏ ÌóàÏö©
//                mapView.getMapboxMap().setRenderWorldCopies(false)
//
//                val lngLat = convertPixelToLngLat(2500, 3900)
//                val marker = PointAnnotationOptions()
//                    .withPoint(Point.fromLngLat(lngLat[0], lngLat[1]))
//                    .withIconImage("marker-icon")
//                mapView.annotations.createPointAnnotationManager().create(marker)
//            }
//        }
//    }
//
//    AndroidView(factory = { mapView })
//}
