package com.ssafy.jangan_mobile.ui.screen

import android.graphics.BitmapFactory
import android.os.Handler
import android.os.Looper
import android.util.Log
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.LinearEasing
import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.navigationBars
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.windowInsetsPadding
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.mapbox.geojson.Point
import com.mapbox.maps.CameraBoundsOptions
import com.mapbox.maps.CameraOptions
import com.mapbox.maps.CoordinateBounds
import com.mapbox.maps.MapView
import com.mapbox.maps.extension.style.image.image
import com.mapbox.maps.extension.style.layers.generated.backgroundLayer
import com.mapbox.maps.extension.style.layers.generated.rasterLayer
import com.mapbox.maps.extension.style.sources.generated.imageSource
import com.mapbox.maps.extension.style.style
import com.mapbox.maps.plugin.animation.MapAnimationOptions.Companion.mapAnimationOptions
import com.mapbox.maps.plugin.animation.flyTo
import com.mapbox.maps.plugin.annotation.annotations
import com.mapbox.maps.plugin.annotation.generated.PointAnnotation
import com.mapbox.maps.plugin.annotation.generated.PointAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions
import com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation
import com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions
import com.mapbox.maps.plugin.annotation.generated.createPointAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.createPolylineAnnotationManager
import com.mapbox.maps.plugin.compass.compass
import com.mapbox.maps.plugin.gestures.getGesturesManager
import com.mapbox.maps.plugin.scalebar.scalebar
import com.ssafy.jangan_mobile.R
import com.ssafy.jangan_mobile.service.dto.BeaconNotificationDto
import com.ssafy.jangan_mobile.service.dto.FireNotificationDto
import com.ssafy.jangan_mobile.store.CompassSensorManager
import com.ssafy.jangan_mobile.store.FireNotificationStore
import com.ssafy.jangan_mobile.ui.component.ArrivalCard
import com.ssafy.jangan_mobile.ui.component.EvacuationButton
import com.ssafy.jangan_mobile.ui.component.FireNotificationCard
import com.ssafy.jangan_mobile.ui.component.FireStation
import com.ssafy.jangan_mobile.ui.component.FloorSelector
import com.ssafy.jangan_mobile.ui.component.ToMyLocation
import com.ssafy.jangan_mobile.ui.viewmodel.MapViewModel
import com.ssafy.jangan_mobile.viewmodel.EscapeRouteViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

@Composable
fun EscapeRouteMapScreen(
    navController: NavController,
    viewModel: EscapeRouteViewModel = viewModel(),
    mapViewModel: MapViewModel = hiltViewModel()
) {
    val context = LocalContext.current
    val mapView = remember { MapView(context) }

    val zoomLevel = 6.5

    val fireNotificationDto: FireNotificationDto? by FireNotificationStore.fireNotificationDto.observeAsState()
    val currentLocationCode by FireNotificationStore.currentLocationBeaconCode.observeAsState()
    val routePoints by viewModel.route.observeAsState(emptyList())
    val imageUrl by mapViewModel.mapImageUrl.collectAsState()
    val myLocation by viewModel.myLocation.observeAsState()
    val isTracking by viewModel.isTracking.observeAsState()
    val fireFloors by viewModel.fireFloors.collectAsState()



    val showRoute = remember { mutableStateOf(false) }
    val selectedFloor = remember { mutableStateOf("B1") }
    val pointAnnotationManager = remember { mutableStateOf<PointAnnotationManager?>(null) }
    val polylineManager = remember { mutableStateOf<PolylineAnnotationManager?>(null) }
    val polylineList = remember { mutableListOf<PolylineAnnotation>() }

    val imageWidth = 5000
    val imageHeight = 7800
    val aspectRatio = imageWidth.toDouble() / imageHeight.toDouble()
    val coordinateHeight = 60.0
    val coordinateWidth = coordinateHeight * aspectRatio
    val top = coordinateHeight / 2
    val bottom = -coordinateHeight / 2
    val left = -coordinateWidth / 2
    val right = coordinateWidth / 2

    val colors = listOf(
        android.graphics.Color.rgb(138, 234, 82),
        android.graphics.Color.argb(128, 138, 234, 82)
    ) // Ï¥àÎ°ù ‚Üî Ìà¨Î™Ö
    var colorIndex = 0

    val fireMarkerIcons = listOf("fire-weak", "fire-strong")
    var fireIconIndex = 0

    val handler = Handler(Looper.getMainLooper())
    var blinkRunnable: Runnable? = null

    fun convertPixelToLngLat(x: Int, y: Int): List<Double> {
        val lng = left + (x.toDouble() / imageWidth) * (right - left)
        val lat = top - (y.toDouble() / imageHeight) * (top - bottom)
        return listOf(lng, lat)
    }


    // ÏÉÅÌÉú Î≥ÄÏàò
    val redLighting = remember { mutableStateOf(false) }
    val hasArrived = remember { mutableStateOf(false) }
    val showArrivalCard = remember { mutableStateOf(false) }
    val isCardVisible = remember { mutableStateOf(true) } // ÎèÑÏ∞©Ïπ¥Îìú
    val isGuiding = remember { mutableStateOf(false) }
    val isFireNotificationCardVisible = remember { mutableStateOf(true) } // ÎßàÏª§ ÌÅ¥Î¶≠Ïö©
    val fireNotification = fireNotificationDto
    val isFireStationShown = remember { mutableStateOf(false) } // ÏµúÏ¥à ÏïåÎ¶ºÏö©
    val cctvImageUrl = remember { mutableStateOf<String?>(null) }
    val selectedFireBeaconDto = remember { mutableStateOf<BeaconNotificationDto?>(null) }
    val lineState = remember { mutableStateOf(0) }
    val lastShownFireId = remember { mutableStateOf<String?>(null) }
    val previousFireCodes = remember { mutableStateListOf<Int>() }
    val selectedImageUrl = remember { mutableStateOf("") }
    val mapConfigTrigger = remember { mutableStateOf(0) }
    val isFireIconClicked = remember { mutableStateOf(false) }
    val firebeaconSave = remember { mutableMapOf<PointAnnotation, BeaconNotificationDto>() }
    val firefloor = remember { mutableStateListOf<String>() }


    // ÎßàÏª§Îì§
    val myLocationAnnotation = remember { mutableStateOf<PointAnnotation?>(null) }
    val goalMarker = remember { mutableStateOf<PointAnnotation?>(null) }
    val fireMarkers = remember { mutableStateListOf<PointAnnotation>() }
    val destinationMarker = remember { mutableStateOf<PointAnnotation?>(null) }
    val routeMarkers = remember { mutableListOf<PointAnnotation>() }

    // Ïù¥ÎØ∏ÏßÄ Î°úÎìú
    LaunchedEffect(Unit) {
        Log.d("EscapeRouteScreen", "‚úÖ EscapeRouteMapScreen ÏßÑÏûÖ")
        mapViewModel.fetchMapImage("222", "1001")
    }

    // ÎÇ¥ ÏúÑÏπò ÏöîÏ≤≠
    LaunchedEffect(currentLocationCode) {
        while (true) {
            currentLocationCode?.toInt()?.let {
                viewModel.fetchMyLocation(222, it)
            }
            kotlinx.coroutines.delay(2000) // 2Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
        }
    }

    // Î¨∏ÏûêÏó¥ Ï∏µÏùÑ API ÏΩîÎìúÎ°ú Î≥ÄÌôò
    fun floorStringToCode(floor: String): Int? {
        return when (floor) {
            "B1" -> 1001
            "B2" -> 1002
            "B3" -> 1003
            else -> null
        }
    }

    // Ï∏µ Î≥ÄÍ≤Ω Ïãú Ïù¥ÎØ∏ÏßÄ ÏöîÏ≤≠
    LaunchedEffect(selectedFloor.value) {
        val floorCode = floorStringToCode(selectedFloor.value)?.toString() ?: return@LaunchedEffect
        mapViewModel.fetchMapImage("222", floorCode)
    }

    // üî• Ïã§Ï†ú ÌôîÏû¨ Î∞úÏÉùÌïú ÎπÑÏΩò Ï§ë Ï≤´ Î≤àÏß∏ Ï∞æÍ∏∞
    val targetBeaconDto = fireNotificationDto
        ?.beaconNotificationDtos
        ?.firstOrNull { it.isNewFire == 1 }

    // ÏßÄÎèÑ Ï¥àÍ∏∞ Ïä§ÌÉÄÏùº ÏÑ§Ï†ï (ÏµúÏ¥à Ìïú Î≤àÎßå Ïã§Ìñâ)
    LaunchedEffect(imageUrl) {
        if (imageUrl != null) {
            mapView.mapboxMap.loadStyle(
                style {
                    +backgroundLayer("background") {
                        backgroundColor("#EFF0F1")
                    }
                    +image(
                        "marker-icon",
                        BitmapFactory.decodeResource(context.resources, R.drawable.maker_icon)
                    ) {}
                    +image(
                        "fire-icon",
                        BitmapFactory.decodeResource(context.resources, R.drawable.fire)
                    ) {}

                    +image("fire-weak", BitmapFactory.decodeResource(context.resources, R.drawable.fire_weak)) {}
                    +image("fire-strong", BitmapFactory.decodeResource(context.resources, R.drawable.fire_strong)) {}

                    +image(
                        "destination-icon",
                        BitmapFactory.decodeResource(context.resources, R.drawable.goal)
                    ) {}
                    +imageSource("custom-map") {
                        url(imageUrl!!)
                        coordinates(
                            listOf(
                                convertPixelToLngLat(0, 0),
                                convertPixelToLngLat(imageWidth, 0),
                                convertPixelToLngLat(imageWidth, imageHeight),
                                convertPixelToLngLat(0, imageHeight)
                            )
                        )
                    }
                    +rasterLayer("custom-map-layer", "custom-map") {
                        rasterOpacity(1.0)
                    }
                }
            ) {
                var center = convertPixelToLngLat(imageWidth / 2, imageHeight / 2)
                // ÌôîÏû¨ÏïåÎûå Ï°¥Ïû¨ Ïãú ÏßÄÎèÑ Ï≤òÏùå ÏúÑÏπòÎ•º ÌôîÏû¨ ÏúÑÏπòÎ°ú
                if (!(fireNotificationDto?.beaconNotificationDtos?.isEmpty() ?: true)) {
                    fireNotificationDto!!.beaconNotificationDtos.forEach { dto ->
                        if (dto.isNewFire == 1) {
                            center = listOf(dto.coordX, dto.coordY)
                        }
                    }
                }
                mapView.mapboxMap.setCamera(
                    CameraOptions.Builder()
                        .center(Point.fromLngLat(center[0], center[1]))
                        .zoom(zoomLevel)
                        .build()
                )
                mapView.mapboxMap.setBounds(
                    CameraBoundsOptions.Builder()
                        .bounds(
                            CoordinateBounds(
                                Point.fromLngLat(left, bottom),
                                Point.fromLngLat(right, top)
                            )
                        )
                        .build()
                )
                mapView.mapboxMap.getGesturesManager()!!.rotateGestureDetector.isEnabled = false
                mapView.mapboxMap.getGesturesManager()!!.shoveGestureDetector.isEnabled = false
                val annotationApi = mapView.annotations
                pointAnnotationManager.value = annotationApi.createPointAnnotationManager()
                polylineManager.value = annotationApi.createPolylineAnnotationManager()
            }
        }
        mapView.compass.enabled = false; //ÎÇòÏπ®Î∞ò ÎπÑÌôúÏÑ±Ìôî
        mapView.scalebar.enabled = false; //Ïä§ÏºÄÏùºÎ∞î ÎπÑÌôúÏÑ±Ìôî
        mapConfigTrigger.value = mapConfigTrigger.value + 1
    }

    //Î∞©Ìñ• ÏÑºÏÑú ÏÑ§Ï†ï
    val azimuthState = remember { mutableStateOf(0) }
    val compassSensorManager = remember {
        CompassSensorManager(context) { azimuth ->
            val azimuthInt = azimuth.toInt() - (azimuth.toInt() % 5)
            if(azimuthInt != azimuthState.value){
                azimuthState.value = azimuthInt
            }
        }
    }
    DisposableEffect(Unit) {
        compassSensorManager.startListening()
        onDispose {
            compassSensorManager.stopListening()
        }
    }

    // ÎßàÏª§ Í∞ÅÎèÑ ÏàòÏ†ï
    LaunchedEffect(azimuthState.value) {
        var beforePointAnnotation: PointAnnotation? = null
        myLocationAnnotation.value?.let {
//            pointAnnotationManager.value?.delete(it)
//            myLocationAnnotation.value = null
            beforePointAnnotation = it
        }
        val selectedFloorCode = floorStringToCode(selectedFloor.value)
        myLocation?.let { beacon ->
            if (beacon.floor == selectedFloorCode) {
                val marker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(beacon.coordX, beacon.coordY))
                    .withIconImage("marker-icon")
                    .withIconSize(0.15)
                    .withIconRotate(azimuthState.value.toDouble())
                myLocationAnnotation.value = pointAnnotationManager.value?.create(marker)
            }
        }
        myLocationAnnotation.value?.let {
            pointAnnotationManager.value?.delete(beforePointAnnotation!!)
        }
    }

    // üîÅ ÎÇ¥ ÏúÑÏπò ÎßàÏª§Îßå Îî∞Î°ú Í¥ÄÎ¶¨
    LaunchedEffect(myLocation, selectedFloor.value, isTracking) {
        myLocationAnnotation.value?.let {
            pointAnnotationManager.value?.delete(it)
            myLocationAnnotation.value = null
        }
        val selectedFloorCode = floorStringToCode(selectedFloor.value)
        myLocation?.let { beacon ->
            if (beacon.floor == selectedFloorCode) {
                val marker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(beacon.coordX, beacon.coordY))
                    .withIconImage("marker-icon")
                    .withIconSize(0.15)
                    .withIconRotate(azimuthState.value.toDouble())
                myLocationAnnotation.value = pointAnnotationManager.value?.create(marker)
            }
        }
        // ÌòÑÏû¨ ÏúÑÏπò Ïπ¥Î©îÎùº Ï∂îÏ†Å
        if (isTracking ?: false && myLocation != null) {
            mapView.mapboxMap.flyTo(
                CameraOptions.Builder()
                    .center(Point.fromLngLat(myLocation!!.coordX, myLocation!!.coordY))
                    .zoom(zoomLevel)
                    .build(),
                mapAnimationOptions {
                    duration(1500L)
                }
            )
        }
    }

    LaunchedEffect(selectedImageUrl.value) {
        Log.d("üî• ImageURL", "üîÑ Ïù¥ÎØ∏ÏßÄ URL Î≥ÄÍ≤ΩÎê®: ${selectedImageUrl.value}")
    }

    // ÌôîÏû¨ ÏúÑÏπòÎßå Îî∞Î°ú Í¥ÄÎ¶¨
    LaunchedEffect(
        fireNotificationDto?.beaconNotificationDtos,
        selectedFloor.value,
        showArrivalCard.value,
        mapConfigTrigger.value,
        selectedImageUrl.value
    ) {

        // ÌôîÏû¨Ï¢åÌëú Î®ºÏ†Ä ÎÇòÏò§Í≤åÎÅî nullÍ∞í ÌôïÏù∏
        if (fireNotificationDto == null) {
            Log.w("FireMarker", "üî• ÏïÑÏßÅ fireNotificationDtoÍ∞Ä ÎèÑÏ∞©ÌïòÏßÄ ÏïäÏïòÏùå")
            return@LaunchedEffect
        }

        Log.d("üî•fireCheck", "Î∂àÏù¥ÏïºÎ∂àÏù¥Ïïº fireNotificationDto: $fireNotificationDto")
        val selectedFloorCode = floorStringToCode(selectedFloor.value)
        Log.d("FireMarker", "üî• LaunchedEffect Ìò∏Ï∂úÎê®. ÌòÑÏû¨ Ï∏µ: $selectedFloorCode")
        if (pointAnnotationManager.value == null) {
            Log.d("FireMarker", "pointAnnotationManagerÍ∞Ä null")
        }

        pointAnnotationManager.value?.let { manager ->
            val fireBeacons = fireNotificationDto?.beaconNotificationDtos
                ?: run {
                    Log.w("FireMarker", "‚ö†Ô∏è fireNotificationDtoÍ∞Ä nullÏù¥Í±∞ÎÇò Ìï¥Îãπ Ï∏µÏùò ÌôîÏû¨ ÏóÜÏùå")
                    return@let
                }
            manager.delete(fireMarkers)
            fireMarkers.clear()
            Log.d("Firewhere", "Î∂àÏù¥ÏïºÎ∂àÎ∂à")
            fireBeacons.forEachIndexed { index, beacon ->
                if(floorStringToCode(selectedFloor.value) == beacon.floor){
                    Log.d(
                        "FireMarker",
                        "üî• [$index] ÌôîÏû¨ ÎßàÏª§ ÏÉùÏÑ± ‚Üí coord=(${beacon.coordX}, ${beacon.coordY}), floor=${beacon.floor}, beaconCode=${beacon.beaconCode}"
                    )
                    val marker = PointAnnotationOptions()
                        .withPoint(Point.fromLngLat(beacon.coordX, beacon.coordY))
                        .withIconImage("fire-icon")
                        .withIconSize(0.25)
                    val fireMarker = manager.create(marker)
                    fireMarkers.add(fireMarker)

                    // ÌôîÏû¨ ÏïÑÏù¥ÏΩòÏóê ÎπÑÏΩò ÏΩîÎìú Ï†ÄÏû•
                    firebeaconSave[fireMarker] = beacon

                    // ‚úÖ ÎßàÏª§ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Îì±Î°ù
                    manager.addClickListener { clicked ->
                        val clickedBeacon = firebeaconSave[clicked]
                        if (clickedBeacon != null) {
                            Log.d("FireMarker", "üî• ÌôîÏû¨ ÎßàÏª§ ÌÅ¥Î¶≠Îê®! ‚Üí Î™®Îã¨ Îã§Ïãú Ïó¥Í∏∞")

                            // beacon.beaconCodeÏôÄ fireNotification.stationIdÎ•º Ìï®Íªò ÏÇ¨Ïö©
                            val stationId = fireNotification?.stationId ?: return@addClickListener false
                            val beaconCode = clickedBeacon.beaconCode

                            Log.d(
                                "FireMarker",
                                "‚û°Ô∏è ÎßàÏª§ ÌÅ¥Î¶≠Îê® ÏöîÏ≤≠Ìï† stationId=$stationId, beaconCode=$beaconCode"
                            )
                            Log.d("üî• ÎßàÏª§ ÌÅ¥Î¶≠", "‚û°Ô∏è ÏÑ†ÌÉùÎêú ÎßàÏª§Ïùò beaconCode=$beaconCode, stationId=$stationId")
                            Log.d(
                                "üî• ÎßàÏª§ ÌÅ¥Î¶≠",
                                "‚û°Ô∏è Ï¢åÌëú=(${clickedBeacon.coordX}, ${clickedBeacon.coordY}), Ï∏µ=${clickedBeacon.floor}"
                            )

                            viewModel.fetchCctvImage(stationId, beaconCode) { url ->
                                Log.d("FireMarker", "üì∏ fetchCctvImage ‚Üí Î∞õÏïÑÏò® imageUrl=$url")

    //                            cctv Ïù¥ÎØ∏ÏßÄÎ°ú Î∞õÏïÑÏò¨ ÏòàÏ†ï
                                selectedImageUrl.value = "$url"
    //                            selectedImageUrl.value =
    //                                "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Example.jpg/320px-Example.jpg"
                                selectedFireBeaconDto.value = null
                                selectedFireBeaconDto.value = clickedBeacon.copy()
                                isFireIconClicked.value = true
                                isFireNotificationCardVisible.value = false
                                isFireNotificationCardVisible.value = true
    //                            isCardVisible.value = true
                            }
                            true
                        } else false
                    }
                }
            }
        }
    }

    LaunchedEffect(imageUrl) {
        Log.d("üî• AsyncImage Trigger", "üñºÔ∏è imageUrl Î≥ÄÍ≤Ω Í∞êÏßÄÎê® ‚Üí $imageUrl")
    }

    // üîÅ Í≤ΩÎ°ú ÌëúÏãúÎèÑ Î∂ÑÎ¶¨Ìï¥ÏÑú Í¥ÄÎ¶¨
    LaunchedEffect(routePoints, showRoute.value, selectedFloor.value) {
        val selectedFloorCode = floorStringToCode(selectedFloor.value)


        if (hasArrived.value) return@LaunchedEffect


        // Í≤ΩÎ°ú Ïà®Í∏∞Í∏∞Í±∞ÎÇò Ìè¨Ïù∏Ìä∏ Î∂ÄÏ°±Ìï† Í≤ΩÏö∞ ÎùºÏù∏ & ÎßàÏª§ Î™®Îëê ÏÇ≠Ï†ú
        if (!showRoute.value || routePoints.isEmpty()) {

            polylineManager.value?.deleteAll()
            routeMarkers.forEach { marker -> pointAnnotationManager.value?.delete(marker) }
            routeMarkers.clear()


            return@LaunchedEffect
        }
        // ÎùºÏù∏Îßå ÏßÄÏö∞Í∏∞ (routePointsÍ∞Ä 1Í∞úÏù∏ Í≤ΩÏö∞)
        if (!showRoute.value || routePoints.size == 1) {

            polylineManager.value?.deleteAll()

//
//            // Í∏∞Ï°¥ Î™©Ï†ÅÏßÄ ÎßàÏª§ ÏßÄÏö∞Í∏∞
//            destinationMarker.value?.let { existingMarker ->
//                pointAnnotationManager.value?.delete(existingMarker)
//                destinationMarker.value = null
//            }

            // ‚úÖ Î¨¥Ï°∞Í±¥ routePoints[0]Ïóê Î™©Ï†ÅÏßÄ ÎßàÏª§ ÌëúÏãú
            val destination = routePoints.first()
            Log.d("EscapeRouteMap", "üìç Î™©Ï†ÅÏßÄ ÎßàÏª§ Ï∂îÍ∞Ä: (${destination.x}, ${destination.y})")


            if (destination.floor == selectedFloorCode) {
                val endMarker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(destination.x, destination.y))
                    .withIconImage("destination-icon")
                    .withIconSize(0.15)
                pointAnnotationManager.value?.create(endMarker)
            }
            // ‚úÖ ÎÇ¥ ÏúÑÏπò ÎßàÏª§ (routePoints.last())
            val currentPosition = routePoints.last()


            // ‚úÖ ÎèÑÏ∞© Ïó¨Î∂Ä: Í∞ùÏ≤¥ Í∞í ÏùºÏπòÎ°úÎßå ÌåêÎã®
            if (destination.floor == currentPosition.floor &&
                destination.x == currentPosition.x &&
                destination.y == currentPosition.y
            ) {
                Log.d("EscapeRouteMap", "üìç ÎèÑÏ∞©")
                if (!showArrivalCard.value) {
                    Log.d("EscapeRouteMap", "üéâ Î™©Ï†ÅÏßÄ ÎèÑÏ∞© (Ï¢åÌëú ÎèôÏùº) ‚Üí ÏïàÎÇ¥ Ïπ¥Îìú ÌëúÏãú")
                    showArrivalCard.value = true
                    hasArrived.value = true

//                    // ÎèÑÏ∞©ÏßÄ ÎßàÏª§ Ï†úÍ±∞
//                    destinationMarker.value?.let { existingMarker ->
//                        pointAnnotationManager.value?.delete(existingMarker)
//                        destinationMarker.value = null
//                    }
                }
            } else {
                Log.w(
                    "EscapeRouteMap",
                    "‚ùå ÎèÑÏ∞© ÏïÑÎãò ‚Üí destination=(${destination.x}, ${destination.y}, floor=${destination.floor}) | " +
                            "current=(${currentPosition.x}, ${currentPosition.y}, floor=${currentPosition.floor})"
                )
            }
            return@LaunchedEffect
        }


        polylineManager.value?.deleteAll()
        routeMarkers.clear()
        polylineList.clear()

        if (showRoute.value && routePoints.size >= 2) {
            Log.d("EscapeRouteMap", "üü© Ï†ÑÏ≤¥ Í≤ΩÎ°ú Ï¢åÌëú:")
            routePoints.forEachIndexed { index, point ->
                Log.d("EscapeRouteMap", "[$index] (${point.x}, ${point.y}) on floor ${point.floor}")
            }
            polylineManager.value?.deleteAll()
            routeMarkers.forEach { marker ->
                pointAnnotationManager.value?.delete(marker)
            }
            routeMarkers.clear()
            polylineList.clear()
            for (i in 0 until routePoints.size - 1) {
                val start = routePoints[i]
                val end = routePoints[i + 1]

                if (start.floor != selectedFloorCode || end.floor != selectedFloorCode) continue

                val polyline = PolylineAnnotationOptions()
                    .withPoints(
                        listOf(
                            Point.fromLngLat(start.x, start.y),
                            Point.fromLngLat(end.x, end.y)
                        )
                    )
                    .withLineColor("#8AEA52")
                    .withLineWidth(6.0)
                val line = polylineManager.value?.create(polyline)
                polylineList.add(line!!)
            }


            // ‚úÖ Î¨¥Ï°∞Í±¥ routePoints[0]Ïóê Î™©Ï†ÅÏßÄ ÎßàÏª§ ÌëúÏãú
            val destination = routePoints.first()
            Log.d("EscapeRouteMap", "üìç Î™©Ï†ÅÏßÄ ÎßàÏª§ Ï∂îÍ∞Ä: (${destination.x}, ${destination.y})")

            // Í∏∞Ï°¥ Î™©Ï†ÅÏßÄ ÎßàÏª§ ÏßÄÏö∞Í∏∞
            destinationMarker.value?.let { existingMarker ->
                pointAnnotationManager.value?.delete(existingMarker)
                destinationMarker.value = null
            }

            if (destination.floor == selectedFloorCode) {
                val marker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(destination.x, destination.y))
                    .withIconImage("destination-icon")
                    .withIconSize(0.2)
                destinationMarker.value = pointAnnotationManager.value?.create(marker)
            }
            // ‚úÖ ÎÇ¥ ÏúÑÏπò ÎßàÏª§ (routePoints.last())
            val currentPosition = routePoints.last()

            // ‚úÖ ÎèÑÏ∞© Ïó¨Î∂Ä: Í∞ùÏ≤¥ Í∞í ÏùºÏπòÎ°úÎßå ÌåêÎã®
            if (destination.floor == currentPosition.floor &&
                destination.x == currentPosition.x &&
                destination.y == currentPosition.y
            ) {
                Log.d("EscapeRouteMap", "üìç ÎèÑÏ∞©")
                if (!showArrivalCard.value) {
                    Log.d("EscapeRouteMap", "üéâ Î™©Ï†ÅÏßÄ ÎèÑÏ∞© (Ï¢åÌëú ÎèôÏùº) ‚Üí ÏïàÎÇ¥ Ïπ¥Îìú ÌëúÏãú")
                    showArrivalCard.value = true

                    // Î™©Ï†ÅÏßÄ ÎßàÏª§Îßå Ï†úÍ±∞
                    destinationMarker.value?.let {
                        pointAnnotationManager.value?.delete(it)
                        destinationMarker.value = null
                    }
                }
            } else {
                Log.w(
                    "EscapeRouteMap",
                    "‚ùå ÎèÑÏ∞© ÏïÑÎãò ‚Üí destination=(${destination.x}, ${destination.y}, floor=${destination.floor}) | " +
                            "current=(${currentPosition.x}, ${currentPosition.y}, floor=${currentPosition.floor})"
                )
            }

        }
        lineState.value = lineState.value + 1
    }
    LaunchedEffect(lineState, showRoute.value) {
        while (showRoute.value) {
            polylineList.forEach { polyline ->
                polyline.lineColorInt = colors[colorIndex]
                polylineManager.value?.update(polyline)
            }
            colorIndex = (colorIndex + 1) % colors.size
            delay(500)
        }
    }

    LaunchedEffect(fireNotificationDto) {
        while (true) {
            // üî• fire ÎßàÏª§ Ïù¥ÎØ∏ÏßÄ ÍµêÏ≤¥
            val nextIcon = fireMarkerIcons[fireIconIndex]
            val manager = pointAnnotationManager.value ?: return@LaunchedEffect

            fireMarkers.toList().forEachIndexed { index, marker ->
                val point = marker.point

                // ÏÉàÎ°úÏö¥ ÎßàÏª§ ÏÉùÏÑ±
                val newMarkerOptions = PointAnnotationOptions()
                    .withPoint(point)
                    .withIconImage(nextIcon)
                    .withIconSize(0.25)
                val newMarker = manager.create(newMarkerOptions)

                // 1. Î®ºÏ†Ä ÏÉà ÎßàÏª§Î•º fireMarkers Î¶¨Ïä§Ìä∏Ïóê ÎÑ£Í≥†
                fireMarkers[index] = newMarker
                // 2. Í∏∞Ï°¥ ÎßàÏª§ ÏÇ≠Ï†ú (ÎçÆÏñ¥ÏîåÏö¥ Îí§ Ï†úÍ±∞)
                manager.delete(marker)
            }
            fireIconIndex = (fireIconIndex + 1) % fireMarkerIcons.size
            delay(500)
        }
    }

    // ÏïàÎÇ¥ Ï¢ÖÎ£å Î™®Îã¨
    LaunchedEffect(showArrivalCard.value) {
        if (showArrivalCard.value) {
            kotlinx.coroutines.delay(5000)
            showArrivalCard.value = false
            isGuiding.value = false // ‚úÖ ÏïàÎÇ¥ Ï¢ÖÎ£å Î≤ÑÌäºÎèÑ Ìï®Íªò ÏÇ¨ÎùºÏßÄÍ≤å

            Log.d("DEST_MARKER", "üß™ ÏÇ≠Ï†ú ÏãúÎèÑ Ï†Ñ ÏÉÅÌÉú: ${destinationMarker.value}")
            // ÎèÑÏ∞©ÏßÄ ÎßàÏª§ Ï†úÍ±∞
            destinationMarker.value?.let {
                pointAnnotationManager.value?.delete(it)
                Log.d("DEST_MARKER", "üóëÔ∏è ÎèÑÏ∞© ÎßàÏª§ ÏÇ≠Ï†ú ÏãúÎèÑ: $destinationMarker")
            }
            destinationMarker.value = null
            Log.d("DEST_MARKER", "üóëÔ∏è ÎèÑÏ∞© ÎßàÏª§ ÏÇ≠Ï†ú ÏãúÎèÑ (null Ïó¨Î∂Ä ÏÉÅÍ¥ÄÏóÜÏù¥ Ï¥àÍ∏∞Ìôî)")

            // Í≤ΩÎ°ú ÎßàÏª§ Ï†úÍ±∞
            routeMarkers.forEach {
                pointAnnotationManager.value?.delete(it)
            }
            routeMarkers.clear()

            // Í≤ΩÎ°ú ÏÑ† Ï†úÍ±∞
            polylineManager.value?.deleteAll()
        }
    }


    //ÌôîÏû¨ ÎÇ¨ÏùÑ Îïå ÌôîÎ©¥ Î∂âÍ≤å ÌïòÍ∏∞
    LaunchedEffect(fireNotificationDto) {
        val isFireActive =
            fireNotificationDto?.beaconNotificationDtos?.any { it.isNewFire == 1 } == true

        if (isFireActive && !redLighting.value) {
            launch {
                redLighting.value = true
                Log.d("Debug", "Red lighting started")
                delay(10000) // 5Ï¥à ÎåÄÍ∏∞
                redLighting.value = false
                Log.d("Debug", "Red lighting stopped after 5 seconds")
            }
        }


        // ÏÉàÎ°úÏö¥ ÌôîÏû¨ ÎÇòÌÉÄÎÇ† ÎñÑ Ïã§ÏãúÍ∞Ñ Î™®Îã¨ ÏûêÎèô ÌëúÏãú
        val currentFires = fireNotificationDto?.beaconNotificationDtos
            ?.filter { it.isNewFire == 1 }
            ?.map { it.beaconCode } ?: emptyList()


        // üîç Ïù¥Ï†ÑÏóê ÏóÜÎçò ÏÉà ÌôîÏû¨ ÌÉêÏÉâ
        val newFireCode = currentFires.firstOrNull { it !in previousFireCodes }

        if (newFireCode != null) {
            val newFire =
                fireNotificationDto?.beaconNotificationDtos?.firstOrNull { it.beaconCode == newFireCode }

            if (newFire != null) {
                Log.d("üî• Fire", "üö® ÏÉàÎ°≠Í≤å Ï∂îÍ∞ÄÎêú ÌôîÏû¨ Í∞êÏßÄ ‚Üí Î™®Îã¨ ÌëúÏãú")
//                selectedFireBeaconDto.value = newFire
//                isCardVisible.value = true

                isFireStationShown.value = true

                mapView.mapboxMap.flyTo(
                    CameraOptions.Builder()
                        .zoom(zoomLevel)
                        .center(Point.fromLngLat(newFire.coordX, newFire.coordY))
                        .build()
                )

                // üî• 3. Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ Í≤ΩÎ°ú Ïû¨ÏöîÏ≤≠ (ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú ÏàúÏÑúÎ•º Î≥¥Ïû•)
                delay(1000)

                if (isGuiding.value) {
                    Log.d("üî• Fire", "üìç ÏÉà ÌôîÏû¨ ÌõÑ Í≤ΩÎ°ú Ïû¨ÌÉêÏÉâ Ïã§Ìñâ")
                    currentLocationCode?.let { code ->
                        viewModel.fetchEscapeRoute(222, code)
                    }
                }

            }
        }

        // üîÑ ÌòÑÏû¨ ÌôîÏû¨ ÏÉÅÌÉú Ï†ÄÏû• (Îã§Ïùå Î≥ÄÍ≤Ω ÎåÄÎπÑ)
        previousFireCodes.clear()
        previousFireCodes.addAll(currentFires)


        // Ï∏µÏàò Î∞îÎÄåÎäî Í≤É Ï†ÅÏö©ÌïòÍ∏∞
        viewModel.updateFireFloors(fireNotificationDto)

    }

    //üî•Îπ®Í∞ÑÏÉâ ÍπúÎπ°ÏûÑ Ïï†ÎãàÎ©îÏù¥ÏÖò
    val infiniteTransition = rememberInfiniteTransition()
    val alpha by infiniteTransition.animateFloat(
        initialValue = 0.0f,
        targetValue = 0.5f,
        animationSpec = infiniteRepeatable(
            animation = tween(500, easing = LinearEasing),
            repeatMode = RepeatMode.Reverse
        )
    )
    //üî• ÌôîÏû¨ ÏÉÅÌô©Ïùº Îïå Îπ®Í∞ÑÏÉâ ÍπúÎπ°ÏûÑ Ìö®Í≥º Ï∂îÍ∞Ä
    Box(modifier = Modifier.fillMaxSize()) {
//        AndroidView(factory = { mapView })

        if (redLighting.value) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color.Red.copy(alpha = alpha)) // Ìà¨Î™ÖÎèÑÍ∞Ä Î≥ÄÌïòÎäî Îπ®Í∞ÑÏÉâ Î∞∞Í≤Ω
            )
        }
    }
//=========================================

// UI Íµ¨ÏÑ±
    Box(
        modifier = Modifier
            .fillMaxSize()
            .clickable {
                if (isCardVisible.value) {
                    Log.d("EscapeRouteUI", "üõë ÌôîÎ©¥ ÌÅ¥Î¶≠ ‚Üí ÌôîÏû¨ Î™®Îã¨ Îã´Í∏∞")
                    isCardVisible.value = false
                }
            }
    ) {
        // 1. ÏßÄÎèÑ Î∞∞Í≤Ω
        AndroidView(factory = { mapView })

        // ÌôîÏû¨ Ïó≠Ï†ïÎ≥¥ Î™®Îã¨
        if (targetBeaconDto?.imageUrl?.isNotEmpty() == true && fireNotification != null) {

            // üöÄ ÏµúÏ¥à ÏßÑÏûÖ Ïãú fadeIn Ìä∏Î¶¨Í±∞
            LaunchedEffect(isCardVisible.value) {
                if (isCardVisible.value) {
                    isFireStationShown.value = true
                }
            }

            Box(
                modifier = Modifier.fillMaxSize()
            ) {
                // üîπ Î∞∞Í≤Ω ÌÅ¥Î¶≠ Í∞êÏßÄÎ•º ÏúÑÌïú Î∞òÏùë ÏóÜÎäî Ìà¨Î™Ö Î†àÏù¥Ïñ¥
                if (isFireStationShown.value) {
                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .clickable(
                                indication = null,
                                interactionSource = remember { MutableInteractionSource() }
                            ) {
                                Log.d("FireModal", "üì¥ Î∞∞Í≤Ω ÌÅ¥Î¶≠ ‚Üí Î™®Îã¨ Îã´Í∏∞")
                                isFireStationShown.value = false
                            }
                    )
                }

                // üî∏ FireStation Î™®Îã¨ (ÌôîÎ©¥ ÏÉÅÎã®Ïóê Í≥†Ï†ï)
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(top = 36.dp),
                    contentAlignment = Alignment.TopCenter
                ) {
                    AnimatedVisibility(
                        visible = isFireStationShown.value,
                        enter = slideInVertically(initialOffsetY = { -100 }) + fadeIn(),
                        exit = slideOutVertically(targetOffsetY = { -100 }) + fadeOut()
                    ) {
                        FireStation(
                            stationName = fireNotification?.stationName ?: "",
                            beaconName = targetBeaconDto?.beaconName ?: "Ïïå Ïàò ÏóÜÏùå",
                            imageUrl = targetBeaconDto?.imageUrl ?: "",
                            isVisible = isCardVisible.value,
                            onDismiss = { isFireStationShown.value = false },
                            onGuideClick = { Log.d("FireModal", "‚û°Ô∏è ÎåÄÌîº Í≤ΩÎ°ú ÌÅ¥Î¶≠") }
                        )
                    }
                }
            }
        }


        // Îπ®Í∞ÑÏÉâ ÌôîÎ©¥ ÏÉùÏÑ±
        if (redLighting.value) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color.Red.copy(alpha = alpha)) // Ìà¨Î™ÖÎèÑÍ∞Ä Î≥ÄÌïòÎäî Îπ®Í∞ÑÏÉâ Î∞∞Í≤Ω
            )
        }

        // ‚úÖ ÎèÑÏ∞© ÏïåÎ¶º Ïπ¥Îìú
        if (showArrivalCard.value) {
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 36.dp)
            ) {
                ArrivalCard(
                    onDismiss = {
                        showArrivalCard.value = false
                        isGuiding.value = false
//                    pointAnnotationManager.value?.deleteAll()
                    },
                    // Í≤ΩÎ°ú Ïû¨ÏïàÎÇ¥ ÎàåÎ†ÄÏùÑ Îïå
                    onRetry = {
                        Log.d("ArrivalCard", "üîÅ Í≤ΩÎ°ú Ïû¨ÏïàÎÇ¥ ÏöîÏ≤≠")
                        hasArrived.value = false
                        showArrivalCard.value = false
                        isGuiding.value = true
                        showRoute.value = true

                        currentLocationCode?.let {
                            viewModel.fetchEscapeRoute(it, it)
                        }
                    },
                    modifier = Modifier
                        .align(Alignment.TopCenter)
                        .padding(top = 24.dp)
                )
            }
        }

        // 2. Ïò§Î≤ÑÎ†àÏù¥ Ï†ÑÏ≤¥ (Ï∏µ Î≤ÑÌäº, ÏïàÎÇ¥ Î≤ÑÌäº Îì±)
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(top = 16.dp, start = 16.dp, end = 16.dp, bottom = 24.dp)
                .windowInsetsPadding(WindowInsets.navigationBars),
            verticalArrangement = Arrangement.Bottom,
            horizontalAlignment = Alignment.Start
//            verticalArrangement = Arrangement.SpaceBetween
        ) {
//            Spacer(modifier = Modifier.height(12.dp)) // ÏÉÅÎã® Í≥µÍ∞Ñ

            // ‚úÖ Î≤ÑÌäº ÏòÅÏó≠
//            Box(
//                modifier = Modifier
//                    .fillMaxWidth()
//                    .padding(start = 16.dp, end = 16.dp, bottom = 24.dp),
//                contentAlignment = Alignment.BottomStart
//            )
//                Column(
//                    modifier = Modifier.align(Alignment.BottomStart),
////                horizontalAlignment = Alignment.Start
//                )
            ToMyLocation(
                modifier = Modifier.align(Alignment.Start),
                mapView = mapView,
                myLocation = myLocation,
                onClick = { }
            )
            Spacer(modifier = Modifier.height(15.dp))
            FloorSelector(
                selectedFloor = selectedFloor.value,
                onFloorSelected = { selectedFloor.value = it },
                firefloor = fireFloors
            )
            if (!showArrivalCard.value) {
                Spacer(modifier = Modifier.height(36.dp))
                EvacuationButton(
                    isGuiding = isGuiding.value,
                    onClick = {
                        if (isGuiding.value) {
                            // ‚úÖ ÏïàÎÇ¥ Ï¢ÖÎ£å Ï≤òÎ¶¨
                            isGuiding.value = false
                            showRoute.value = false
                            polylineManager.value?.deleteAll()
                            goalMarker.value?.let { pointAnnotationManager.value?.delete(it) }
//                                destinationMarker.value?.let { pointAnnotationManager.value?.delete(it) }
                            routeMarkers.forEach { pointAnnotationManager.value?.delete(it) }
                            routeMarkers.clear()
                            myLocationAnnotation.value?.let {
                                pointAnnotationManager.value?.delete(
                                    it
                                )
                            }
                            viewModel.setIsTracking(false)
                        } else {
                            // ‚úÖ ÏïàÎÇ¥ ÏãúÏûë
                            hasArrived.value = false
                            currentLocationCode?.let { code ->
                                viewModel.fetchEscapeRoute(222, code)
                                showRoute.value = true
                                isGuiding.value = true
                                viewModel.setIsTracking(true)
                            }
                        }
                    }
                )
            }




        }


        // Ï°∞Í±¥ Ï≤¥ÌÅ¨Îßå Îî∞Î°ú
        val shouldShowFireNotificationCard =
            isFireNotificationCardVisible.value &&
                    selectedFireBeaconDto.value != null &&
                    isFireIconClicked.value == true

            // ‚úÖ üî• ÏÉÅÏÑ∏ Î™®Îã¨
        AnimatedVisibility(
            visible = shouldShowFireNotificationCard,
            enter = slideInVertically(initialOffsetY = { -1000 }) + fadeIn(),
            exit = slideOutVertically(targetOffsetY = { -1000 }) + fadeOut()
        ){
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .align(Alignment.TopCenter)
                    .padding(top = 36.dp, start = 16.dp, end = 16.dp)
                    .windowInsetsPadding(WindowInsets.navigationBars)
                    .clickable(
                        interactionSource = remember { MutableInteractionSource() },
                        indication = null
                    ) { /* ÎÇ¥Î∂Ä ÌÉ≠ Î¨¥Ïãú */ }
                    .pointerInput(Unit) {
                        detectTapGestures(
                            onTap = {
                                Log.d("FireModal", "üõë Î∞∞Í≤Ω ÌÅ¥Î¶≠ ‚Üí Î™®Îã¨ Îã´Í∏∞")
                                isFireNotificationCardVisible.value = false
                            }
                        )
                    }
            )   {
    //                AnimatedVisibility(
    //                    visible = isFireNotificationCardVisible.value,
    //                    enter = slideInVertically(initialOffsetY = { -300 }) + fadeIn(),
    //                    exit = slideOutVertically(targetOffsetY = { -300 }) + fadeOut()
    //                ) {
                FireNotificationCard(
                    beaconName = selectedFireBeaconDto.value?.beaconName ?: "Ïïå Ïàò ÏóÜÏùå",
                    imageUrl = selectedImageUrl.value,
                    isVisible = isFireNotificationCardVisible.value,
                    onDismiss = {
                        Log.d("FireModal", "üõë Î™®Îã¨ Îã´Í∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠")
                        isFireNotificationCardVisible.value = false
                        isFireIconClicked.value = false
                    },
                    onGuideClick = {
                        Log.d("FireModal", "‚û°Ô∏è ÎåÄÌîº Í≤ΩÎ°ú Ï∞æÍ∏∞ ÌÅ¥Î¶≠Îê®")
                        isFireNotificationCardVisible.value = false
                        currentLocationCode?.let { code ->
                            viewModel.fetchEscapeRoute(222, code)
                            showRoute.value = true
                            isGuiding.value = true
                        }
                    }
                )

                }
            }
        }
    }



// ÌôîÏû¨Í∞Ä ÎÇòÎ©¥ Í∑∏ Ï∏µ Ïàò Í∞ÄÏ†∏Ïò§Í∏∞
// Í∑∏ Ï∏µÏàòÎ•º Ïù∏ÏãùÌïòÏó¨ ÌîåÎ°úÏñ¥ Î≤ÑÌäºÏùò Ï¥àÎ°ùÏÉâÏùÑ ÍπúÎπ°Ïù¥Í≤å ÌïòÍ∏∞
