package com.ssafy.jangan_mobile.ui.screen

import android.graphics.BitmapFactory
import android.util.Log
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.findViewTreeLifecycleOwner
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.mapbox.geojson.Point
import com.mapbox.maps.CameraBoundsOptions
import com.mapbox.maps.CameraOptions
import com.mapbox.maps.CoordinateBounds
import com.mapbox.maps.MapView
import com.mapbox.maps.extension.style.image.image
import com.mapbox.maps.extension.style.layers.generated.backgroundLayer
import com.mapbox.maps.extension.style.layers.generated.rasterLayer
import com.mapbox.maps.extension.style.sources.generated.imageSource
import com.mapbox.maps.extension.style.style
import com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions
import com.mapbox.maps.plugin.annotation.annotations
import com.mapbox.maps.plugin.annotation.generated.PointAnnotation
import com.mapbox.maps.plugin.annotation.generated.PointAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.createPointAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.createPolylineAnnotationManager
import com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions
import com.mapbox.maps.plugin.gestures.gestures
import com.ssafy.jangan_mobile.R
import com.ssafy.jangan_mobile.service.dto.BeaconNotificationDto
import com.ssafy.jangan_mobile.service.dto.FireNotificationDto
import com.ssafy.jangan_mobile.store.FireNotificationStore
import com.ssafy.jangan_mobile.ui.component.ArrivalCard
import com.ssafy.jangan_mobile.ui.component.EvacuationButton
import com.ssafy.jangan_mobile.ui.component.FireNotificationCard
import com.ssafy.jangan_mobile.ui.component.FloorSelector
import com.ssafy.jangan_mobile.ui.viewmodel.MapViewModel
import com.ssafy.jangan_mobile.viewmodel.EscapeRouteViewModel
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.res.painterResource

@Composable
fun EscapeRouteMapScreen(
    navController: NavController,
    viewModel: EscapeRouteViewModel = viewModel(),
    mapViewModel: MapViewModel = hiltViewModel()
) {
    val context = LocalContext.current
    val mapView = remember { MapView(context) }

    val fireNotificationDto: FireNotificationDto? by FireNotificationStore.fireNotificationDto.observeAsState()
    val currentLocationCode by FireNotificationStore.currentLocationBeaconCode.observeAsState()
    val routePoints by viewModel.route.observeAsState(emptyList())
    val imageUrl by mapViewModel.mapImageUrl.collectAsState()
    val myLocation by viewModel.myLocation.observeAsState()

    val showRoute = remember { mutableStateOf(false) }
    val selectedFloor = remember { mutableStateOf("B1") }
    val pointAnnotationManager = remember { mutableStateOf<PointAnnotationManager?>(null) }
    val polylineManager = remember { mutableStateOf<PolylineAnnotationManager?>(null) }

    val imageWidth = 5000
    val imageHeight = 7800
    val aspectRatio = imageWidth.toDouble() / imageHeight.toDouble()
    val coordinateHeight = 60.0
    val coordinateWidth = coordinateHeight * aspectRatio
    val top = coordinateHeight / 2
    val bottom = -coordinateHeight / 2
    val left = -coordinateWidth / 2
    val right = coordinateWidth / 2

    fun convertPixelToLngLat(x: Int, y: Int): List<Double> {
        val lng = left + (x.toDouble() / imageWidth) * (right - left)
        val lat = top - (y.toDouble() / imageHeight) * (top - bottom)
        return listOf(lng, lat)
    }

    val isCardVisible = remember { mutableStateOf(true) }

    // Í≤ΩÎ°ú ÎèÑÏ∞© ÏÉÅÌÉú Î≥ÄÏàò
    val hasArrived = remember { mutableStateOf(false) }
    val showArrivalCard = remember { mutableStateOf(false) }

    val goalMarker = remember { mutableStateOf<PointAnnotation?>(null) }

    val fireMarkers = remember { mutableStateListOf<PointAnnotation>() }

    // Ïù¥ÎØ∏ÏßÄ Î°úÎìú
    LaunchedEffect(Unit) {
        Log.d("EscapeRouteScreen", "‚úÖ EscapeRouteMapScreen ÏßÑÏûÖ")
        mapViewModel.fetchMapImage("222", "1001")
    }

    // ÎÇ¥ ÏúÑÏπò ÏöîÏ≤≠
    LaunchedEffect(currentLocationCode) {
        currentLocationCode?.toInt()?.let {
            Log.d("EscapeRouteScreen", "‚úÖ ÎÇ¥ ÏúÑÏπò ÏöîÏ≤≠")
            viewModel.fetchMyLocation(222, it)
        }
    }

    // Î¨∏ÏûêÏó¥ Ï∏µÏùÑ API ÏΩîÎìúÎ°ú Î≥ÄÌôò
    fun floorStringToCode(floor: String): Int? {
        return when (floor) {
            "B1" -> 1001
            "B2" -> 1002
            "B3" -> 1003
            else -> null
        }
    }

    // Ï∏µ Î≥ÄÍ≤Ω Ïãú Ïù¥ÎØ∏ÏßÄ ÏöîÏ≤≠
    LaunchedEffect(selectedFloor.value) {
        val floorCode = floorStringToCode(selectedFloor.value)?.toString() ?: return@LaunchedEffect
        mapViewModel.fetchMapImage("222", floorCode)
    }

    // üî• Ïã§Ï†ú ÌôîÏû¨ Î∞úÏÉùÌïú ÎπÑÏΩò Ï§ë Ï≤´ Î≤àÏß∏ Ï∞æÍ∏∞
    val targetBeaconDto = fireNotificationDto
        ?.beaconNotificationDtos
        ?.firstOrNull { it.isNewFire == 1 }

    // ÏßÄÎèÑ Ï¥àÍ∏∞ Ïä§ÌÉÄÏùº ÏÑ§Ï†ï (ÏµúÏ¥à Ìïú Î≤àÎßå Ïã§Ìñâ)
    LaunchedEffect(imageUrl) {
        if (imageUrl != null) {
            mapView.mapboxMap.loadStyle(
                style {
                    +backgroundLayer("background") {
                        backgroundColor("#EFF0F1")
                    }
                    +image(
                        "marker-icon",
                        BitmapFactory.decodeResource(context.resources, R.drawable.marker_icon)
                    ) {}
                    +image(
                        "fire-icon",
                        BitmapFactory.decodeResource(context.resources, R.drawable.fire)
                    ) {}
                    +image(
                        "destination-icon",
                        BitmapFactory.decodeResource(context.resources, R.drawable.goal)
                    ) {}
                    +imageSource("custom-map") {
                        url(imageUrl!!)
                        coordinates(
                            listOf(
                                convertPixelToLngLat(0, 0),
                                convertPixelToLngLat(imageWidth, 0),
                                convertPixelToLngLat(imageWidth, imageHeight),
                                convertPixelToLngLat(0, imageHeight)
                            )
                        )
                    }
                    +rasterLayer("custom-map-layer", "custom-map") {
                        rasterOpacity(1.0)
                    }
                }
            ) {
                val center = convertPixelToLngLat(imageWidth / 2, imageHeight / 2)
                mapView.mapboxMap.setCamera(
                    CameraOptions.Builder()
                        .center(Point.fromLngLat(center[0], center[1]))
                        .zoom(3.0)
                        .build()
                )
                mapView.mapboxMap.setBounds(
                    CameraBoundsOptions.Builder()
                        .bounds(
                            CoordinateBounds(
                                Point.fromLngLat(left, bottom),
                                Point.fromLngLat(right, top)
                            )
                        )
                        .build()
                )

                val annotationApi = mapView.annotations
                pointAnnotationManager.value = annotationApi.createPointAnnotationManager()
                polylineManager.value = annotationApi.createPolylineAnnotationManager()
            }
        }
    }

    // üîÅ ÎÇ¥ ÏúÑÏπò ÎßàÏª§Îßå Îî∞Î°ú Í¥ÄÎ¶¨
    LaunchedEffect(myLocation, selectedFloor.value) {
        pointAnnotationManager.value?.deleteAll()
        val selectedFloorCode = floorStringToCode(selectedFloor.value)
        myLocation?.let { beacon ->
            if (beacon.floor == selectedFloorCode) {
                val marker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(beacon.coordX, beacon.coordY))
                    .withIconImage("marker-icon")
                    .withIconSize(0.5)
                pointAnnotationManager.value?.create(marker)
            }
        }
    }

    // ÌôîÏû¨ ÏúÑÏπòÎßå Îî∞Î°ú Í¥ÄÎ¶¨
    LaunchedEffect(fireNotificationDto, selectedFloor.value, showArrivalCard.value) {
        if (showArrivalCard.value) {
            Log.d("FireMarker", "‚úÖ ÎèÑÏ∞© ÌõÑ ÌôîÏû¨ ÎßàÏª§ ÌëúÏãú ÏÉùÎûµ")
            return@LaunchedEffect
        }

        val selectedFloorCode = floorStringToCode(selectedFloor.value)
        Log.d("FireMarker", "üî• LaunchedEffect Ìò∏Ï∂úÎê®. ÌòÑÏû¨ Ï∏µ: $selectedFloorCode")
        pointAnnotationManager.value?.let { manager ->
            manager.deleteAll()

            val fireBeacons = fireNotificationDto?.beaconNotificationDtos
                ?.filter { it.floor == selectedFloorCode } ?: run {
                Log.w("FireMarker", "‚ö†Ô∏è fireNotificationDtoÍ∞Ä nullÏù¥Í±∞ÎÇò Ìï¥Îãπ Ï∏µÏùò ÌôîÏû¨ ÏóÜÏùå")
                return@let
            }
            fireBeacons.forEachIndexed { index, beacon ->
                Log.d(
                    "FireMarker",
                    "üî• [$index] ÌôîÏû¨ ÎßàÏª§ ÏÉùÏÑ± ‚Üí coord=(${beacon.coordX}, ${beacon.coordY}), floor=${beacon.floor}, beaconCode=${beacon.beaconCode}"
                )
                val marker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(beacon.coordX, beacon.coordY))
                    .withIconImage("fire-icon")
                    .withIconSize(0.25)
                val fireMarker = manager.create(marker)

                // ‚úÖ ÎßàÏª§ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Îì±Î°ù
                manager.addClickListener { clicked ->
                    if (clicked == fireMarker) {
                        Log.d("FireMarker", "üî• ÌôîÏû¨ ÎßàÏª§ ÌÅ¥Î¶≠Îê®! ‚Üí Î™®Îã¨ Îã§Ïãú Ïó¥Í∏∞")
                        isCardVisible.value = true
                        true
                    } else false
                }
            }
        }
    }

    // üîÅ Í≤ΩÎ°ú ÌëúÏãúÎèÑ Î∂ÑÎ¶¨Ìï¥ÏÑú Í¥ÄÎ¶¨
    LaunchedEffect(routePoints, showRoute.value, selectedFloor.value) {
        val selectedFloorCode = floorStringToCode(selectedFloor.value)


        // Í≤ΩÎ°ú Ïà®Í∏∞Í∏∞Í±∞ÎÇò Ìè¨Ïù∏Ìä∏ Î∂ÄÏ°±Ìï† Í≤ΩÏö∞ ÎùºÏù∏ & ÎßàÏª§ Î™®Îëê ÏÇ≠Ï†ú
        if (!showRoute.value || routePoints.isEmpty()) {
            polylineManager.value?.deleteAll()
            pointAnnotationManager.value?.deleteAll()
            return@LaunchedEffect
        }
        // ÎùºÏù∏Îßå ÏßÄÏö∞Í∏∞ (routePointsÍ∞Ä 1Í∞úÏù∏ Í≤ΩÏö∞)
        if (!showRoute.value || routePoints.size == 1) {
            // ‚úÖ Î¨¥Ï°∞Í±¥ routePoints[0]Ïóê Î™©Ï†ÅÏßÄ ÎßàÏª§ ÌëúÏãú
            val destination = routePoints.first()
            Log.d("EscapeRouteMap", "üìç Î™©Ï†ÅÏßÄ ÎßàÏª§ Ï∂îÍ∞Ä: (${destination.x}, ${destination.y})")


            if (destination.floor == selectedFloorCode) {
                val endMarker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(destination.x, destination.y))
                    .withIconImage("destination-icon")
                    .withIconSize(0.5)
                pointAnnotationManager.value?.create(endMarker)
            }
            // ‚úÖ ÎÇ¥ ÏúÑÏπò ÎßàÏª§ (routePoints.last())
            val currentPosition = routePoints.last()
            if (currentPosition.floor == selectedFloorCode) {
                Log.d("EscapeRouteMap", "üìç ÎÇ¥ÏúÑÏπò ÎßàÏª§ Ï∂îÍ∞Ä: (${currentPosition.x}, ${currentPosition.y})")
                val myLocationMarker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(currentPosition.x, currentPosition.y))
                    .withIconImage("marker-icon") // ÎÇ¥ ÏúÑÏπò ÏïÑÏù¥ÏΩò
                    .withIconSize(0.5)
                pointAnnotationManager.value?.create(myLocationMarker)
            } else {
                Log.d(
                    "EscapeRouteMap",
                    "‚ö†Ô∏è Î™©Ï†ÅÏßÄ Ï∏µ(${destination.floor})Ïù¥ ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Ï∏µ($selectedFloorCode)Í≥º Îã§Î¶Ñ"
                )
            }

            // ‚úÖ ÎèÑÏ∞© Ïó¨Î∂Ä: Í∞ùÏ≤¥ Í∞í ÏùºÏπòÎ°úÎßå ÌåêÎã®
            if (destination.floor == currentPosition.floor &&
                destination.x == currentPosition.x &&
                destination.y == currentPosition.y
            ) {
                Log.d("EscapeRouteMap", "üìç ÎèÑÏ∞©")
                if (!showArrivalCard.value) {
                    Log.d("EscapeRouteMap", "üéâ Î™©Ï†ÅÏßÄ ÎèÑÏ∞© (Ï¢åÌëú ÎèôÏùº) ‚Üí ÏïàÎÇ¥ Ïπ¥Îìú ÌëúÏãú")
                    showArrivalCard.value = true
                }
            } else {
                Log.w(
                    "EscapeRouteMap",
                    "‚ùå ÎèÑÏ∞© ÏïÑÎãò ‚Üí destination=(${destination.x}, ${destination.y}, floor=${destination.floor}) | " +
                            "current=(${currentPosition.x}, ${currentPosition.y}, floor=${currentPosition.floor})"
                )
            }
            return@LaunchedEffect
        }


        if (showRoute.value && routePoints.size >= 2) {
            Log.d("EscapeRouteMap", "üü© Ï†ÑÏ≤¥ Í≤ΩÎ°ú Ï¢åÌëú:")
            routePoints.forEachIndexed { index, point ->
                Log.d("EscapeRouteMap", "[$index] (${point.x}, ${point.y}) on floor ${point.floor}")
            }
            polylineManager.value?.deleteAll()
            pointAnnotationManager.value?.deleteAll()

            for (i in 0 until routePoints.size - 1) {
                val start = routePoints[i]
                val end = routePoints[i + 1]

                if (start.floor != selectedFloorCode || end.floor != selectedFloorCode) continue

                val polyline = PolylineAnnotationOptions()
                    .withPoints(
                        listOf(
                            Point.fromLngLat(start.x, start.y),
                            Point.fromLngLat(end.x, end.y)
                        )
                    )
                    .withLineColor("#8AEA52")
                    .withLineWidth(6.0)
                polylineManager.value?.create(polyline)
            }

            // ‚úÖ Î¨¥Ï°∞Í±¥ routePoints[0]Ïóê Î™©Ï†ÅÏßÄ ÎßàÏª§ ÌëúÏãú
            val destination = routePoints.first()
            Log.d("EscapeRouteMap", "üìç Î™©Ï†ÅÏßÄ ÎßàÏª§ Ï∂îÍ∞Ä: (${destination.x}, ${destination.y})")


            if (destination.floor == selectedFloorCode) {
                val endMarker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(destination.x, destination.y))
                    .withIconImage("destination-icon")
                    .withIconSize(0.5)
                pointAnnotationManager.value?.create(endMarker)
            }
            // ‚úÖ ÎÇ¥ ÏúÑÏπò ÎßàÏª§ (routePoints.last())
            val currentPosition = routePoints.last()
            if (currentPosition.floor == selectedFloorCode) {
                Log.d("EscapeRouteMap", "üìç ÎÇ¥ÏúÑÏπò ÎßàÏª§ Ï∂îÍ∞Ä: (${currentPosition.x}, ${currentPosition.y})")
                val myLocationMarker = PointAnnotationOptions()
                    .withPoint(Point.fromLngLat(currentPosition.x, currentPosition.y))
                    .withIconImage("marker-icon") // ÎÇ¥ ÏúÑÏπò ÏïÑÏù¥ÏΩò
                    .withIconSize(0.5)
                pointAnnotationManager.value?.create(myLocationMarker)
            } else {
                Log.d(
                    "EscapeRouteMap",
                    "‚ö†Ô∏è Î™©Ï†ÅÏßÄ Ï∏µ(${destination.floor})Ïù¥ ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Ï∏µ($selectedFloorCode)Í≥º Îã§Î¶Ñ"
                )
            }

            // ‚úÖ ÎèÑÏ∞© Ïó¨Î∂Ä: Í∞ùÏ≤¥ Í∞í ÏùºÏπòÎ°úÎßå ÌåêÎã®
            if (destination.floor == currentPosition.floor &&
                destination.x == currentPosition.x &&
                destination.y == currentPosition.y
            ) {
                Log.d("EscapeRouteMap", "üìç ÎèÑÏ∞©")
                if (!showArrivalCard.value) {
                    Log.d("EscapeRouteMap", "üéâ Î™©Ï†ÅÏßÄ ÎèÑÏ∞© (Ï¢åÌëú ÎèôÏùº) ‚Üí ÏïàÎÇ¥ Ïπ¥Îìú ÌëúÏãú")
                    showArrivalCard.value = true
                }
            } else {
                    Log.w(
                        "EscapeRouteMap",
                        "‚ùå ÎèÑÏ∞© ÏïÑÎãò ‚Üí destination=(${destination.x}, ${destination.y}, floor=${destination.floor}) | " +
                                "current=(${currentPosition.x}, ${currentPosition.y}, floor=${currentPosition.floor})"
                    )
                }
        }
    }


    // UI Íµ¨ÏÑ±
    Box(
        modifier = Modifier
            .fillMaxSize()
            .clickable {
                if (isCardVisible.value) {
                    Log.d("EscapeRouteUI", "üõë ÌôîÎ©¥ ÌÅ¥Î¶≠ ‚Üí ÌôîÏû¨ Î™®Îã¨ Îã´Í∏∞")
                    isCardVisible.value = false
                }
            }
    ) {
        // 1. ÏßÄÎèÑ Î∞∞Í≤Ω
        AndroidView(factory = { mapView })

        // ‚úÖ ÎèÑÏ∞© ÏïåÎ¶º Ïπ¥Îìú
        if (showArrivalCard.value) {
            ArrivalCard(
                onDismiss = {
                    showArrivalCard.value = false
                    pointAnnotationManager.value?.deleteAll()
                },
                modifier = Modifier
                    .align(Alignment.TopCenter)
                    .padding(top = 12.dp)
            )
        }

        // 2. Ïò§Î≤ÑÎ†àÏù¥ Ï†ÑÏ≤¥ (Ï∏µ Î≤ÑÌäº, ÏïàÎÇ¥ Î≤ÑÌäº Îì±)
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.SpaceBetween
        ) {
            Spacer(modifier = Modifier.height(12.dp)) // ÏÉÅÎã® Í≥µÍ∞Ñ

            // ‚úÖ Î≤ÑÌäº ÏòÅÏó≠
            Box(modifier = Modifier.fillMaxWidth()) {
                Column(
                    modifier = Modifier
                        .align(Alignment.BottomStart)
                        .padding(start = 16.dp, bottom = 50.dp),
                    horizontalAlignment = Alignment.Start
                ) {
                    FloorSelector(
                        selectedFloor = selectedFloor.value,
                        onFloorSelected = { selectedFloor.value = it }
                    )
                    Spacer(modifier = Modifier.height(16.dp))

                    EvacuationButton(
                        onClick = {
                            currentLocationCode?.let { code ->
                                viewModel.fetchEscapeRoute(222, code)
                                showRoute.value = true
                            }
                        }
                    )
                }
            }
        }
        // ‚úÖ üî• ÌôîÏû¨ Î™®Îã¨ Ïò§Î≤ÑÎ†àÏù¥ (ÏµúÏÉÅÎã® Î∂ÑÎ¶¨)
            if (isCardVisible.value && targetBeaconDto?.imageUrl?.isNotEmpty() == true) {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .pointerInput(Unit) {
                            detectTapGestures(
                                onTap = {
                                    Log.d("FireModal", "üõë Î∞îÍπ• ÌÉ≠ ‚Üí Î™®Îã¨ Îã´Í∏∞")
                                    isCardVisible.value = false
                                }
                            )
                        }
                ) {
                    Box(
                        modifier = Modifier
                            .align(Alignment.TopCenter)
                            .padding(top = 60.dp)
                            .clickable(
                                interactionSource = remember { MutableInteractionSource() },
                                indication = null
                            ) { /* ÎÇ¥Î∂Ä ÌÉ≠ Î¨¥Ïãú */ }
                    ) {
                        FireNotificationCard(
                            gateName = targetBeaconDto.beaconName ?: "Ïïå Ïàò ÏóÜÏùå",
                            imageUrl = targetBeaconDto.imageUrl ?: ""
                        )
                    }
                }
            }
        }
    }

//@Composable
//fun EscapeRouteMapScreen(
//    navController: NavController,
//    viewModel: EscapeRouteViewModel = viewModel(),
//    mapViewModel: MapViewModel = hiltViewModel()
//) {
//    val context = LocalContext.current
//    val mapView = remember { MapView(context) }
//
//    val fireNotificationDto: FireNotificationDto? by FireNotificationStore.fireNotificationDto.observeAsState()
//    val currentLocationCode by FireNotificationStore.currentLocationBeaconCode.observeAsState()
//    val routePoints by viewModel.route.observeAsState(emptyList())
//    val imageUrl by mapViewModel.mapImageUrl.collectAsState()
//    val myLocation by viewModel.myLocation.observeAsState()
//
//    val showRoute = remember { mutableStateOf(false) }
//    val selectedFloor = remember { mutableStateOf("B1") }
//    val pointAnnotationManager = remember { mutableStateOf<PointAnnotationManager?>(null) }
//    val polylineManager = remember { mutableStateOf<PolylineAnnotationManager?>(null) }
//
//    val imageWidth = 5000
//    val imageHeight = 7800
//    val aspectRatio = imageWidth.toDouble() / imageHeight.toDouble()
//    val coordinateHeight = 60.0
//    val coordinateWidth = coordinateHeight * aspectRatio
//    val top = coordinateHeight / 2
//    val bottom = -coordinateHeight / 2
//    val left = -coordinateWidth / 2
//    val right = coordinateWidth / 2
//
//    fun convertPixelToLngLat(x: Int, y: Int): List<Double> {
//        val lng = left + (x.toDouble() / imageWidth) * (right - left)
//        val lat = top - (y.toDouble() / imageHeight) * (top - bottom)
//        return listOf(lng, lat)
//    }
//
//    val isCardVisible = remember { mutableStateOf(true) }
//
//    // Í≤ΩÎ°ú ÎèÑÏ∞© ÏÉÅÌÉú Î≥ÄÏàò
//    val hasArrived = remember { mutableStateOf(false) }
//    val showArrivalCard = remember { mutableStateOf(false) }
//
//    val goalMarker = remember { mutableStateOf<PointAnnotation?>(null) }
//
//    // Ïù¥ÎØ∏ÏßÄ Î°úÎìú
//    LaunchedEffect(Unit) {
//        Log.d("EscapeRouteScreen", "‚úÖ EscapeRouteMapScreen ÏßÑÏûÖ")
//        mapViewModel.fetchMapImage("222")
//    }
//
//    // ÎÇ¥ ÏúÑÏπò ÏöîÏ≤≠
//    LaunchedEffect(currentLocationCode) {
//        currentLocationCode?.toInt()?.let {
//            Log.d("EscapeRouteScreen", "‚úÖ ÎÇ¥ ÏúÑÏπò ÏöîÏ≤≠")
//            viewModel.fetchMyLocation(222, it)
//        }
//    }
//
//    // Î¨∏ÏûêÏó¥ Ï∏µÏùÑ API ÏΩîÎìúÎ°ú Î≥ÄÌôò
//    fun floorStringToCode(floor: String): Int? {
//        return when (floor) {
//            "B1" -> 1001
//            "B2" -> 1002
//            "B3" -> 1003
//            else -> null
//        }
//    }
//
//    // üî• Ïã§Ï†ú ÌôîÏû¨ Î∞úÏÉùÌïú ÎπÑÏΩò Ï§ë Ï≤´ Î≤àÏß∏ Ï∞æÍ∏∞
//    val targetBeaconDto = fireNotificationDto
//        ?.beaconNotificationDtos
//        ?.firstOrNull { it.isNewFire == 1 }
//
//    // ÏßÄÎèÑ Ï¥àÍ∏∞ Ïä§ÌÉÄÏùº ÏÑ§Ï†ï (ÏµúÏ¥à Ìïú Î≤àÎßå Ïã§Ìñâ)
//    LaunchedEffect(imageUrl) {
//        if (imageUrl != null) {
//            mapView.mapboxMap.loadStyle(
//                style {
//                    +backgroundLayer("background") {
//                        backgroundColor("#EFF0F1")
//                    }
//                    +image("marker-icon", BitmapFactory.decodeResource(context.resources, R.drawable.marker_icon)) {}
//                    +image("fire-icon", BitmapFactory.decodeResource(context.resources, R.drawable.fire)) {}
//                    +image("destination-icon", BitmapFactory.decodeResource(context.resources, R.drawable.goal)) {}
//                    +imageSource("custom-map") {
//                        url(imageUrl!!)
//                        coordinates(
//                            listOf(
//                                convertPixelToLngLat(0, 0),
//                                convertPixelToLngLat(imageWidth, 0),
//                                convertPixelToLngLat(imageWidth, imageHeight),
//                                convertPixelToLngLat(0, imageHeight)
//                            )
//                        )
//                    }
//                    +rasterLayer("custom-map-layer", "custom-map") {
//                        rasterOpacity(1.0)
//                    }
//                }
//            ) {
//                val center = convertPixelToLngLat(imageWidth / 2, imageHeight / 2)
//                mapView.mapboxMap.setCamera(
//                    CameraOptions.Builder()
//                        .center(Point.fromLngLat(center[0], center[1]))
//                        .zoom(3.0)
//                        .build()
//                )
//                mapView.mapboxMap.setBounds(
//                    CameraBoundsOptions.Builder()
//                        .bounds(CoordinateBounds(Point.fromLngLat(left, bottom), Point.fromLngLat(right, top)))
//                        .build()
//                )
//
//                val annotationApi = mapView.annotations
//                pointAnnotationManager.value = annotationApi.createPointAnnotationManager()
//                polylineManager.value = annotationApi.createPolylineAnnotationManager()
//            }
//        }
//    }
//
//    // üîÅ ÎÇ¥ ÏúÑÏπò ÎßàÏª§Îßå Îî∞Î°ú Í¥ÄÎ¶¨
//    LaunchedEffect(myLocation) {
//        pointAnnotationManager.value?.deleteAll()
//
//        myLocation?.let { beacon ->
//            val marker = PointAnnotationOptions()
//                .withPoint(Point.fromLngLat(beacon.coordX, beacon.coordY))
//                .withIconImage("marker-icon")
//                .withIconSize(0.5)
//            pointAnnotationManager.value?.create(marker)
//        }
//    }
//
//    // ÌôîÏû¨ ÏúÑÏπòÎßå Îî∞Î°ú Í¥ÄÎ¶¨
//    LaunchedEffect(fireNotificationDto) {
//        pointAnnotationManager.value?.let { manager ->
//            val fireBeacons = fireNotificationDto?.beaconNotificationDtos ?: return@let
//            fireBeacons.forEach { beacon ->
//                val marker = PointAnnotationOptions()
//                    .withPoint(Point.fromLngLat(beacon.coordX, beacon.coordY))
//                    .withIconImage("fire-icon")
//                    .withIconSize(0.25)
//                manager.create(marker)
//            }
//        }
//    }
//
//    // üîÅ Í≤ΩÎ°ú ÌëúÏãúÎèÑ Î∂ÑÎ¶¨Ìï¥ÏÑú Í¥ÄÎ¶¨
//    LaunchedEffect(routePoints, showRoute.value) {
//        if (showRoute.value && routePoints.size >= 2) {
//            polylineManager.value?.deleteAll()
////            pointAnnotationManager.value?.deleteAll()
//
//            for (i in 0 until routePoints.size - 1) {
//                val start = routePoints[i]
//                val end = routePoints[i + 1]
//
//                val polyline = PolylineAnnotationOptions()
//                    .withPoints(
//                        listOf(
//                            Point.fromLngLat(start.x, start.y),
//                            Point.fromLngLat(end.x, end.y)
//                        )
//                    )
//                    .withLineColor("#8AEA52")
//                    .withLineWidth(6.0)
//                polylineManager.value?.create(polyline)
//            }
//            if (goalMarker == null) {
//                val destination = routePoints.last()
//                val endMarker = PointAnnotationOptions()
//                    .withPoint(Point.fromLngLat(destination.x, destination.y))
//                    .withIconImage("destination-icon")
//                    .withIconSize(0.5)
//                pointAnnotationManager.value?.create(endMarker)
//            }
//        }
//    }
//
//
//
//    // UI Íµ¨ÏÑ±
//    Box(
//        modifier = Modifier.fillMaxSize()
//            .clickable {
//                if (isCardVisible.value) {
//                    Log.d("EscapeRouteUI", "üõë ÌôîÎ©¥ ÌÅ¥Î¶≠ ‚Üí Î™®Îã¨ Îã´Í∏∞")
//                    isCardVisible.value = false
//                }
//            }) {
//        // 1. ÏßÄÎèÑ Î∑∞ (Î∞∞Í≤Ω Ïó≠Ìï†)
//        AndroidView(factory = { mapView })
//
//        // 2. Ï†ÑÏ≤¥ Ïò§Î≤ÑÎ†àÏù¥
//        Column(
//            modifier = Modifier
//                .fillMaxSize()
//                .padding(16.dp),
//            verticalArrangement = Arrangement.SpaceBetween
//        ) {
//            Column {
//                // üî• ÌôîÏû¨ ÏÉÅÌÉú Î™®Îã¨
//                if (isCardVisible.value && targetBeaconDto?.imageUrl?.isNotEmpty() == true) {
//                    Log.d("EscapeRouteUI", "‚úÖ FireNotificationCard Ìò∏Ï∂úÎê®")
//                    FireNotificationCard(
//                        gateName = targetBeaconDto.beaconName ?: "Ïïå Ïàò ÏóÜÏùå",
//                        imageUrl = targetBeaconDto.imageUrl ?: ""
//                    )
//                    Spacer(modifier = Modifier.height(16.dp))
//                }
//                Box(
//                    modifier = Modifier.fillMaxSize()
//                ) {
//                    // ‚¨ÜÔ∏è Ï∏µ ÏÑ†ÌÉù Ïª¥Ìè¨ÎÑåÌä∏
//                    FloorSelector(
//                        selectedFloor = selectedFloor.value,
//                        onFloorSelected = { selectedFloor.value = it },
//                        modifier = Modifier
//                            .align(Alignment.BottomStart)
//                            .padding(start = 16.dp, bottom = 100.dp)
//                    )
//
//                    EvacuationButton(
//                        onClick = {
//                            currentLocationCode?.let { code ->
//                                viewModel.fetchEscapeRoute(222, code)
//                                showRoute.value = true
//                            }
//                        },
//                        modifier = Modifier
//                            .align(Alignment.BottomCenter)
//                            .padding(bottom = 50.dp)
//                    )
//                }
//            }
//        }
//
//        if (showArrivalCard.value) {
//            ArrivalCard(
//                exitName = "3Î≤à Ï∂úÍµ¨",
//                userCount = 12,
//                onDismiss = { showArrivalCard.value = false },
//                modifier = Modifier.align(Alignment.TopCenter)
//            )
//        }
//    }
//}
//@Composable
//fun EscapeRouteMapScreen(
//    navController: NavController,
//    viewModel: EscapeRouteViewModel = viewModel(),
//    mapViewModel: MapViewModel = hiltViewModel()
//) {
//    val context = LocalContext.current
//    val mapView = remember { MapView(context) }
//
//    val fireNotificationDto: FireNotificationDto? by FireNotificationStore.fireNotificationDto.observeAsState()
//    val currentLocationCode by FireNotificationStore.currentLocationBeaconCode.observeAsState()
//    val routePoints by viewModel.route.observeAsState(emptyList())
//    val imageUrl by mapViewModel.mapImageUrl.collectAsState()
//
//    val showRoute = remember { mutableStateOf(false) }
//
//    val selectedFloor = remember { mutableStateOf("B1") }
//
//    //ÏßÄÎèÑÏóê ÏÇ¨Ïö©Ìï† ÎßàÏª§ Î∞è ÏÑ† Í¥ÄÎ¶¨
//    val pointAnnotationManager = remember { mutableStateOf<PointAnnotationManager?>(null) }
//    val polylineManager = remember { mutableStateOf<PolylineAnnotationManager?>(null) }
//
//    // Ïù¥ÎØ∏ÏßÄ ÏúÑÏπò Í≥ÑÏÇ∞ Í¥ÄÎ†® ÏÑ§Ï†ï
//    val imageWidth = 5000
//    val imageHeight = 7800
//    val aspectRatio = imageWidth.toDouble() / imageHeight.toDouble()
//    val coordinateHeight = 60.0
//    val coordinateWidth = coordinateHeight * aspectRatio
//    val top = coordinateHeight / 2
//    val bottom = -coordinateHeight / 2
//    val left = -coordinateWidth / 2
//    val right = coordinateWidth / 2
//
//
//    fun convertPixelToLngLat(x: Int, y: Int): List<Double> {
//        val lng = left + (x.toDouble() / imageWidth) * (right - left)
//        val lat = top - (y.toDouble() / imageHeight) * (top - bottom)
//        return listOf(lng, lat)
//    }
//
//    val isCardVisible = remember { mutableStateOf(true) }
//    val focusManager = LocalFocusManager.current
//    val myLocation by viewModel.myLocation.observeAsState()
//
//
//    // Î¨∏ÏûêÏó¥ Ï∏µÏùÑ API ÏΩîÎìúÎ°ú Î≥ÄÌôò
//    fun floorStringToCode(floor: String): Int? {
//        return when (floor) {
//            "B1" -> 1001
//            "B2" -> 1002
//            "B3" -> 1003
//            else -> null
//        }
//    }
//
//    // üî• Ïã§Ï†ú ÌôîÏû¨ Î∞úÏÉùÌïú ÎπÑÏΩò Ï§ë Ï≤´ Î≤àÏß∏ Ï∞æÍ∏∞
//    val targetBeaconDto = fireNotificationDto
//        ?.beaconNotificationDtos
//        ?.firstOrNull { it.isNewFire == 1 }
//
//    // ÎÇ¥ÏúÑÏπò Î°úÎìú
//    LaunchedEffect(currentLocationCode) {
//        Log.d("MyLocation", "üì° ÎÇ¥ ÏúÑÏπò ÏöîÏ≤≠ ÏãúÏûë: $currentLocationCode")
//        currentLocationCode?.toInt()?.let { beaconCode ->
//            viewModel.fetchMyLocation(222, beaconCode)
//        }
//    }
//
//    // Ïù¥ÎØ∏ÏßÄ Î°úÎìú
//    LaunchedEffect(Unit) {
//        Log.d("EscapeRouteScreen", "‚úÖ EscapeRouteMapScreen ÏßÑÏûÖ")
//        mapViewModel.fetchMapImage("222")
//    }
//
//    // ÏßÄÎèÑ Ïä§ÌÉÄÏùº Î∞è ÎßàÏª§ Í∞±Ïã†
//    LaunchedEffect(fireNotificationDto, currentLocationCode, routePoints, myLocation, imageUrl) {
//        Log.d("EscapeRouteScreen", "‚úÖ ÏßÄÎèÑ Í∞±Ïã† Ï°∞Í±¥ Î∞úÏÉù")
//        if (imageUrl != null) {
//            mapView.mapboxMap.loadStyle(
//                style {
//                    +backgroundLayer("background") {
//                        backgroundColor("#EFF0F1")
//                    }
//                    +image(
//                        "marker-icon",
//                        BitmapFactory.decodeResource(context.resources, R.drawable.marker_icon)
//                    ) {}
//                    +image(
//                        "fire-icon",
//                        BitmapFactory.decodeResource(context.resources, R.drawable.fire)
//                    ) {}
//                    +image(
//                        "destination-icon",
//                        BitmapFactory.decodeResource(context.resources, R.drawable.goal)
//                    ) {}
//                    +imageSource("custom-map") {
//                        url(imageUrl!!)
//                        coordinates(
//                            listOf(
//                                convertPixelToLngLat(0, 0),
//                                convertPixelToLngLat(imageWidth, 0),
//                                convertPixelToLngLat(imageWidth, imageHeight),
//                                convertPixelToLngLat(0, imageHeight),
//                            )
//                        )
//                    }
//                    +rasterLayer("custom-map-layer", "custom-map") {
//                        rasterOpacity(1.0)
//                    }
//                }
//            ) {
//                val center = convertPixelToLngLat(imageWidth / 2, imageHeight / 2)
//                mapView.getMapboxMap().setCamera(
//                    CameraOptions.Builder()
//                        .center(Point.fromLngLat(center[0], center[1]))
//                        .zoom(3.0)
//                        .build()
//                )
//
//                mapView.mapboxMap.setBounds(
//                    CameraBoundsOptions.Builder()
//                        .bounds(
//                            CoordinateBounds(
//                                Point.fromLngLat(left, bottom),
//                                Point.fromLngLat(right, top)
//                            )
//                        )
//                        .build()
//                )
//
//
//                mapView.gestures.pitchEnabled = true
//                mapView.gestures.rotateEnabled = true
//                mapView.gestures.doubleTapToZoomInEnabled = true
//
//                // Í∏∞Ï°¥ ÎßàÏª§ Î∞è ÏÑ† ÏÇ≠Ï†ú
//                pointAnnotationManager.value?.deleteAll()
//                polylineManager.value?.deleteAll()
//
//
//                val annotationApi = mapView.annotations
//                pointAnnotationManager.value = annotationApi.createPointAnnotationManager()
//                polylineManager.value = annotationApi.createPolylineAnnotationManager()
//
//
//                val selectedFloorCode = floorStringToCode(selectedFloor.value)
//
//
//                // üî• ÌôîÏû¨ ÏúÑÏπò
//                Log.d(
//                    "EscapeRouteScreen",
//                    "üî• fireNotificationDto = $fireNotificationDto $fireNotificationDto?.stationId $fireNotificationDto?.stationName"
//                )
//                fireNotificationDto?.beaconNotificationDtos?.forEach {
//                    Log.d("EscapeRouteScreen", "üî• beacon = $it")
//                    Log.d(
//                        "EscapeRouteScreen",
//                        "üî• Beacon floor=${it.floor}, coord=(${it.coordX}, ${it.coordY})"
//                    )
//                }
//                Log.d("EscapeRouteScreen", "üìç currentLocationCode = $currentLocationCode")
//                Log.d(
//                    "EscapeRouteScreen",
//                    "‚úÖ selectedFloor = ${selectedFloor.value}, code = $selectedFloorCode"
//                )
//
//                fireNotificationDto?.beaconNotificationDtos
////                    ?.filter { it.floor == selectedFloorCode }
//                    ?.forEach { beacon ->
//                        val fireMarker = PointAnnotationOptions()
//                            .withPoint(Point.fromLngLat(beacon.coordX, beacon.coordY))
//                            .withIconImage("fire-icon")
//                            .withIconSize(0.25)
//                        pointAnnotationManager.value?.create(fireMarker)
//                    }
//
//
//                // üßç ÎÇ¥ ÏúÑÏπò
//                myLocation?.let { beacon ->
//                    val myMarker = PointAnnotationOptions()
//                        .withPoint(Point.fromLngLat(beacon.coordX, beacon.coordY))
//                        .withIconImage("marker-icon")
//                        .withIconSize(0.5)
//                    pointAnnotationManager.value?.create(myMarker)
//                }
//
//                // Í≤ΩÎ°ú ÏïàÎÇ¥
//                if (showRoute.value && routePoints.size >= 2) {
//                    Log.d("EscapeRoute", "üîó Í≤ΩÎ°ú ÏÑ† Ïó∞Í≤∞ ÏãúÏûë")
//                    for (i in 0 until routePoints.size - 1) {
//                        val start = routePoints[i]
//                        val end = routePoints[i + 1]
//
//                        // ‚úÖ Ï∏µÏù¥ Îã§Î•¥Î©¥ Í±¥ÎÑàÎõ¥Îã§ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
////                        if (start.floor != end.floor) continue
//
//                        val polyline = PolylineAnnotationOptions()
//                            .withPoints(listOf(
//                                Point.fromLngLat(start.x, start.y),
//                                Point.fromLngLat(end.x, end.y)
//                            ))
//                            .withLineColor("#00FF00")
//                            .withLineWidth(6.0)
//
//                        polylineManager.value?.create(polyline)
//                    }
//                    // ÎßàÏßÄÎßâ ÏßÄÏ†ê ÎßàÏª§ (Î™©Ï†ÅÏßÄ ÎßàÏª§)
//                    val destination = routePoints.last()
//                    val endMarker = PointAnnotationOptions()
//                        .withPoint(Point.fromLngLat(destination.x, destination.y))
//                        .withIconImage("destination-icon") // üëà ÏõêÌïòÎäî ÏïÑÏù¥ÏΩò Îì±Î°ù ÌïÑÏöî
//                        .withIconSize(0.5) // Ï†ÅÏ†àÌïú ÌÅ¨Í∏∞Î°ú ÏÑ§Ï†ï
//                    pointAnnotationManager.value?.create(endMarker)
//                }
//            }
//        }
//    }
//
//    // UI Íµ¨ÏÑ±
//    Box(
//        modifier = Modifier.fillMaxSize()
//            .clickable {
//                if (isCardVisible.value) {
//                    Log.d("EscapeRouteUI", "üõë ÌôîÎ©¥ ÌÅ¥Î¶≠ ‚Üí Î™®Îã¨ Îã´Í∏∞")
//                    isCardVisible.value = false
//                }
//            }) {
//        // 1. ÏßÄÎèÑ Î∑∞ (Î∞∞Í≤Ω Ïó≠Ìï†)
//        AndroidView(factory = { mapView })
//
//        // 2. Ï†ÑÏ≤¥ Ïò§Î≤ÑÎ†àÏù¥
//        Column(
//            modifier = Modifier
//                .fillMaxSize()
//                .padding(16.dp),
//            verticalArrangement = Arrangement.SpaceBetween
//        ) {
//            Column {
//                // üî• ÌôîÏû¨ ÏÉÅÌÉú Î™®Îã¨
//                if (isCardVisible.value && targetBeaconDto?.imageUrl?.isNotEmpty() == true) {
//                    Log.d("EscapeRouteUI", "‚úÖ FireNotificationCard Ìò∏Ï∂úÎê®")
//                    FireNotificationCard(
//                        gateName = targetBeaconDto.beaconName ?: "Ïïå Ïàò ÏóÜÏùå",
//                        imageUrl = targetBeaconDto.imageUrl ?: ""
//                    )
//                    Spacer(modifier = Modifier.height(16.dp))
//                }
//                Box(
//                    modifier = Modifier.fillMaxSize()
//                ) {
//                    // ‚¨ÜÔ∏è Ï∏µ ÏÑ†ÌÉù Ïª¥Ìè¨ÎÑåÌä∏
//                    FloorSelector(
//                        selectedFloor = selectedFloor.value,
//                        onFloorSelected = { selectedFloor.value = it },
//                        modifier = Modifier
//                            .align(Alignment.BottomStart)
//                            .padding(start = 16.dp, bottom = 100.dp)
//                    )
//
//                    EvacuationButton(
//                        onClick = {
//                            currentLocationCode?.let { code ->
//                                viewModel.fetchEscapeRoute(222, code)
//                                showRoute.value = true
//                            }
//                        },
//                        modifier = Modifier
//                            .align(Alignment.BottomCenter)
//                            .padding(bottom = 50.dp)
//                    )
//                }
//            }
//        }
//    }
//}


// Ïò§Î©¥ÏùÄ Í≤ΩÎ°ú Ïó∞Í≤∞ÌïòÍ∏∞
// ÌôîÏû¨ Ïù¥ÎØ∏ÏßÄ Î∂àÎü¨Ïò§Îäî Ïª¥Ìè¨ÎÑåÌä∏ Îã§ÏãúÌïòÍ∏∞
// ÏúÑÍ≤ΩÎèÑ Î∞îÍæ∏Í∏∞
// api ÏÉùÍ∏∞Î©¥, Ï∂úÍµ¨ Ïù∏ÏãùÌï¥ÏÑú ÏïàÎÇ¥Ï¢ÖÎ£å Ïª¥Ìè¨ÎÑåÌä∏ ÌïòÍ∏∞
// ÎÇ¥ÏúÑÏπò api ÏÉùÍ∏∞Î©¥ ÎÇ¥ÏúÑÏπò ÎßàÏª§ Ïó∞Í≤∞ÌïòÍ∏∞


//
//if (isCardVisible.value && targetBeaconDto?.imageUrl?.isNotEmpty() == true) {
//    Box(
//        modifier = Modifier
//            .fillMaxSize()
//            .pointerInput(Unit) {
//                detectTapGestures(
//                    onTap = {
//                        Log.d("FireModal", "üõë Î∞îÍπ• ÌÉ≠ ‚Üí Î™®Îã¨ Îã´Í∏∞")
//                        isCardVisible.value = false
//                    }
//                )
//            }
//    ) {
//        Box(
//            modifier = Modifier
//                .align(Alignment.TopCenter)
//                .padding(top = 60.dp)
//                .clickable(
//                    interactionSource = remember { MutableInteractionSource() },
//                    indication = null
//                ) { /* ÎÇ¥Î∂Ä ÌÉ≠ Î¨¥Ïãú */ }
//        ) {
//            FireNotificationCard(
//                gateName = targetBeaconDto.beaconName ?: "Ïïå Ïàò ÏóÜÏùå",
//                imageUrl = targetBeaconDto.imageUrl ?: ""
//            )
//        }
//    }
//}
